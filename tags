!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<C-G>S	bundle/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	bundle/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-S>	bundle/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<Plug>CSurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>Csurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>TComment_<Leader>_<space>	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_<space> :TComment $/;"	m
<Plug>TComment_<Leader>__	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>__ :TComment<cr>$/;"	m
<Plug>TComment_<Leader>_a	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_a :TCommentAs $/;"	m
<Plug>TComment_<Leader>_b	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<Leader>_n	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<Leader>_p	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_p vip:TComment<cr>$/;"	m
<Plug>TComment_<Leader>_r	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_r :TCommentRight<cr>$/;"	m
<Plug>TComment_<Leader>_s	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_><c-_>	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><c-_> <c-o>:TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><c-_> :TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	bundle/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_><c-_> :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<c-_><space>	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><space> <c-o>:TComment $/;"	m
<Plug>TComment_<c-_><space>	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><space> :TComment $/;"	m
<Plug>TComment_<c-_>a	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>a <c-o>:TCommentAs $/;"	m
<Plug>TComment_<c-_>a	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>a :TCommentAs $/;"	m
<Plug>TComment_<c-_>b	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>b <c-\\><c-o>:TCommentBlock mode=#<cr>$/;"	m
<Plug>TComment_<c-_>b	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<c-_>ca	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>ca :<c-u>call tcomment#SetOption("as", input("Comment as: ", &filetype, "customlist,tcomment#Complete"))<cr>$/;"	m
<Plug>TComment_<c-_>cc	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>cc :<c-u>call tcomment#SetOption("count", v:count1)<cr>$/;"	m
<Plug>TComment_<c-_>i	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>i <c-\\><c-o>v:TCommentInline mode=#<cr>$/;"	m
<Plug>TComment_<c-_>i	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>i v:TCommentInline mode=I#<cr>$/;"	m
<Plug>TComment_<c-_>i	bundle/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_>i :TCommentInline<cr>$/;"	m
<Plug>TComment_<c-_>n	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>n <c-o>:TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>n	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>p	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>p <c-o>:norm! m`vip<cr>:TComment<cr><c-o>``$/;"	m
<Plug>TComment_<c-_>p	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>p m`vip:TComment<cr>``$/;"	m
<Plug>TComment_<c-_>r	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>r <c-o>:TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>r	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>r :TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>s	bundle/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>s <c-o>:TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_>s	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_ic	bundle/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_ic :<c-U>call tcomment#TextObjectInlineComment()<cr>$/;"	m
<Plug>TComment_ic	bundle/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_ic :<c-U>call tcomment#TextObjectInlineComment()<cr>$/;"	m
<Plug>VSurround	bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>YSsurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>snipMateBack	bundle/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateBack           <C-R>=snipMate#BackwardsSnippet()<CR>$/;"	m
<Plug>snipMateNextOrTrigger	bundle/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateNextOrTrigger  <C-R>=snipMate#TriggerSnippet()<CR>$/;"	m
<Plug>snipMateShow	bundle/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateShow           <C-R>=snipMate#ShowAvailableSnips()<CR>$/;"	m
<Plug>snipMateTrigger	bundle/vim-snipmate/plugin/snipMate.vim	/^inoremap <silent> <Plug>snipMateTrigger        <C-R>=snipMate#TriggerSnippet(1)<CR>$/;"	m
<Plug>unimpairedBlankDown	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>call <SID>BlankDown(v:count1)<CR>$/;"	m
<Plug>unimpairedBlankUp	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>call <SID>BlankUp(v:count1)<CR>$/;"	m
<Plug>unimpairedContextNext	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextNext     :call <SID>Context(0)<CR>$/;"	m
<Plug>unimpairedContextNext	bundle/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextNext     :call <SID>ContextMotion(0)<CR>$/;"	m
<Plug>unimpairedContextPrevious	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextPrevious :call <SID>Context(1)<CR>$/;"	m
<Plug>unimpairedContextPrevious	bundle/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextPrevious :call <SID>ContextMotion(1)<CR>$/;"	m
<Plug>unimpairedDirectoryNext	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>edit <C-R>=<SID>fnameescape(fnamemodify(<SID>FileByOffset(v:count1), ':.'))<CR><CR>$/;"	m
<Plug>unimpairedDirectoryPrevious	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>edit <C-R>=<SID>fnameescape(fnamemodify(<SID>FileByOffset(-v:count1), ':.'))<CR><CR>$/;"	m
<Plug>unimpairedMoveDown	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'Down')<CR>$/;"	m
<Plug>unimpairedMoveSelectionDown	bundle/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>$/;"	m
<Plug>unimpairedMoveSelectionUp	bundle/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>$/;"	m
<Plug>unimpairedMoveUp	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'Up')<CR>$/;"	m
<Plug>unimpairedONext	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap <silent> <Plug>unimpairedONext     <Plug>unimpairedDirectoryNext:echohl WarningMSG<Bar>echo "]o is deprecated. Use ]f"<Bar>echohl NONE<CR>$/;"	m
<Plug>unimpairedOPrevious	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nmap <silent> <Plug>unimpairedOPrevious <Plug>unimpairedDirectoryPrevious:echohl WarningMSG<Bar>echo "[o is deprecated. Use [f"<Bar>echohl NONE<CR>$/;"	m
<Plug>unimpairedPaste	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>$/;"	m
<Plug>unimpairedPutAbove	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'Above')<CR>$/;"	m
<Plug>unimpairedPutBelow	bundle/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'Below')<CR>$/;"	m
<SID>:	bundle/vim-rails/autoload/rails.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>xx	bundle/vim-rails/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
ALWAYS	bundle/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
AR	bundle/vim-rails/autoload/rails.vim	/^function! s:AR(cmd,related,line1,line2,count,...) abort$/;"	f
Abbrev	bundle/vim-rails/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
AcceptSelection	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:AcceptSelection(action)$/;"	f
Add	bundle/tlib_vim/spec/tlib/list.vim	/^fun! Add(a,b)$/;"	f
Add	bundle/tlib_vim/test/tlib.vim	/^fun! Add(a,b)$/;"	f
Add	bundle/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! s:Add(dict, line, source, trigger) abort$/;"	f
AddBracketExpand	bundle/vim-rails/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	bundle/vim-rails/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddModeExtra	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:AddModeExtra(comment_mode, extra, beg, end) abort "{{{3$/;"	f
AddParenExpand	bundle/vim-rails/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddScopeAliases	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! s:AddScopeAliases(list) abort$/;"	f
AddSelectiveExpand	bundle/vim-rails/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	bundle/vim-rails/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
AltFiletype	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:AltFiletype(filetype, cdef) abort "{{{3$/;"	f
Alternate	bundle/vim-rails/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...) abort$/;"	f
AssetEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:AssetEdit(cmd, name, dir, suffix, fallbacks) abort$/;"	f
BMRU_Push	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! s:BMRU_Push(bnr) abort "{{{3$/;"	f
BitwiseComparison	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! s:BitwiseComparison(num1, num2, rtype, expr) "{{{3$/;"	f
BlankDown	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankDown(count) abort$/;"	f
BlankUp	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankUp(count) abort$/;"	f
BlockGetCommentRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:BlockGetCommentRx(cdef) abort$/;"	f
BlockGetCommentString	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:BlockGetCommentString(cdef) abort$/;"	f
BlockGetMiddleString	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:BlockGetMiddleString(cdef) abort$/;"	f
Bookmark.AddBookmark	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.GetNodeForName	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
BufAbbreviations	bundle/vim-rails/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	bundle/vim-rails/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	bundle/vim-rails/autoload/rails.vim	/^function! s:BufDatabase(level, ...)$/;"	f
BufMappings	bundle/vim-rails/autoload/rails.vim	/^function! s:BufMappings() abort$/;"	f
BufNavCommands	bundle/vim-rails/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufProjectionCommands	bundle/vim-rails/autoload/rails.vim	/^function! s:BufProjectionCommands()$/;"	f
BufScriptWrappers	bundle/vim-rails/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BuildItem	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:BuildItem(menu, def) "{{{3$/;"	f
BuildMenu	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:BuildMenu(world) "{{{3$/;"	f
BuildPrompt	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:BuildPrompt(upd)$/;"	f
CachedSnips	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:CachedSnips(file) abort$/;"	f
CallAgent	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:CallAgent(handler, world, list) abort "{{{3$/;"	f
CheckAgentReturnValue	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:CheckAgentReturnValue(name, value) "{{{3$/;"	f
CheckList	bundle/vim-snipmate/t/parser.vim	/^        function! CheckList(list)$/;"	f
ChooseSnippet	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! s:ChooseSnippet(snippets) abort$/;"	f
ClearAllCtrlPCaches	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearAllCtrlPCaches cal ctrlp#clra()$/;"	c
ClearCtrlPCache	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar ClearCtrlPCache     cal ctrlp#clr()$/;"	c
Clog	bundle/vim-rails/autoload/rails.vim	/^function! s:Clog(bang, mods, arg) abort$/;"	f
Close	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Close()$/;"	f
Close	bundle/vim-snipmate/ftplugin/html_snip_helper.vim	/^fun! Close() abort$/;"	f
CommandEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:CommandEdit(cmd, name, projections, ...)$/;"	f
CommandList	bundle/vim-rails/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommentBlock	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:CommentBlock(beg, end, cbeg, cend, comment_mode, comment_do, checkRx, cdef) abort$/;"	f
CommentDef	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:CommentDef(beg, end, checkRx, comment_mode, cbeg, cend) abort$/;"	f
CompareBufferNrByMRU	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! s:CompareBufferNrByMRU(a, b) abort "{{{3$/;"	f
CompareBuffernameByBasename	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! s:CompareBuffernameByBasename(a, b) abort "{{{3$/;"	f
CompareHash	bundle/tlib_vim/spec/tlib/hash.vim	/^function! s:CompareHash(text) "{{{3$/;"	f
Complete_alternate	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_alternate(A,L,P)$/;"	f
Complete_cd	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_generate	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_log	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_log(A, L, P) abort$/;"	f
Complete_preview	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_related	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_script(ArgLead, CmdLine, P) abort$/;"	f
Complete_server	bundle/vim-rails/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
ConqueTerm	bundle/Conque-Shell/plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTerm call conque_term#open(<q-args>)$/;"	c
ConqueTermSplit	bundle/Conque-Shell/plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermSplit call conque_term#open(<q-args>, ['belowright split'])$/;"	c
ConqueTermTab	bundle/Conque-Shell/plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermTab call conque_term#open(<q-args>, ['tabnew'])$/;"	c
ConqueTermVSplit	bundle/Conque-Shell/plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermVSplit call conque_term#open(<q-args>, ['belowright vsplit'])$/;"	c
ConstructFromCommentsOption	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ConstructFromCommentsOption(comment_mode) abort$/;"	f
Context	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Context(reverse)$/;"	f
ContextMotion	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:ContextMotion(reverse)$/;"	f
Count	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:Count(string, rx) abort$/;"	f
CountHelper	bundle/tlib_vim/autoload/tlib/string.vim	/^function! s:CountHelper() "{{{3$/;"	f
CreateNewFile	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:CreateNewFile(...)$/;"	f
Creator.BufNamePrefix	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateMirror	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	bundle/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CtrlP	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlP         cal ctrlp#init(0, { 'dir': <q-args> })$/;"	c
CtrlPAug	bundle/ctrlp.vim/autoload/ctrlp.vim	/^	aug CtrlPAug$/;"	a
CtrlPBookmarkDir	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBookmarkDir cal ctrlp#init(ctrlp#bookmarkdir#id())$/;"	c
CtrlPBookmarkDirAdd	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPBookmarkDirAdd$/;"	c
CtrlPBufTag	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPBufTag$/;"	c
CtrlPBufTagAll	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBufTagAll cal ctrlp#init(ctrlp#buffertag#cmd(1))$/;"	c
CtrlPBuffer	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPBuffer   cal ctrlp#init(1)$/;"	c
CtrlPChange	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPChange$/;"	c
CtrlPChangeAll	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPChangeAll   cal ctrlp#init(ctrlp#changes#cmd(1))$/;"	c
CtrlPClearAllCaches	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearAllCaches cal ctrlp#clra()$/;"	c
CtrlPClearCache	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPClearCache     cal ctrlp#clr()$/;"	c
CtrlPCurFile	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurFile cal ctrlp#init(0, { 'mode': 'c' })$/;"	c
CtrlPCurWD	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPCurWD   cal ctrlp#init(0, { 'mode': '' })$/;"	c
CtrlPDir	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPDir$/;"	c
CtrlPLastMode	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? CtrlPLastMode cal ctrlp#init(-1, { 'args': <q-args> })$/;"	c
CtrlPLine	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=buffer CtrlPLine$/;"	c
CtrlPMRUFiles	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -n=? -com=dir CtrlPMRUFiles cal ctrlp#init(2, { 'dir': <q-args> })$/;"	c
CtrlPMixed	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPMixed       cal ctrlp#init(ctrlp#mixed#id())$/;"	c
CtrlPQuickfix	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPQuickfix cal ctrlp#init(ctrlp#quickfix#id())$/;"	c
CtrlPRTS	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRTS       cal ctrlp#init(ctrlp#rtscript#id())$/;"	c
CtrlPRoot	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPRoot    cal ctrlp#init(0, { 'mode': 'r' })$/;"	c
CtrlPTag	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPTag      cal ctrlp#init(ctrlp#tag#id())$/;"	c
CtrlPUndo	bundle/ctrlp.vim/plugin/ctrlp.vim	/^com! -bar CtrlPUndo      cal ctrlp#init(ctrlp#undo#id())$/;"	c
CustomComplete	bundle/vim-rails/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
DefaultValue	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:DefaultValue(option) abort$/;"	f
Delete	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:Delete(msg, file, flags) abort "{{{3$/;"	f
DoReplacements	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:DoReplacements(text, tokens, replacements) abort "{{{3$/;"	f
EncodeCommentPart	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:EncodeCommentPart(string) abort$/;"	f
EndColRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:EndColRx(comment_mode, lnum, pos) abort$/;"	f
EndLineRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:EndLineRx(pos) abort$/;"	f
EndPosRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:EndPosRx(comment_mode, lnum, col) abort$/;"	f
Event.New	bundle/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
ExecMove	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:ExecMove(cmd) abort$/;"	f
ExtendCDef	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ExtendCDef(beg, end, comment_mode, cdef, args) abort$/;"	f
ExtendKeyMap	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:ExtendKeyMap(world, key_mode, key_handlers) "{{{3$/;"	f
Extract	bundle/vim-rails/autoload/rails.vim	/^function! s:Extract(bang, mods, ...) range abort$/;"	f
ExtractCommentsPart	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ExtractCommentsPart() abort$/;"	f
FileByOffset	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:FileByOffset(num)$/;"	f
Filename	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! Filename(...) abort$/;"	f
FlagSet.New	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet._flagsForScope	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.addFlag	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet.removeFlag	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
ForceUpdate	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ForceUpdate()$/;"	f
FormatHelp	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:FormatHelp(help) abort "{{{3$/;"	f
FormatHelpItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:FormatHelpItem(item, fmt) abort "{{{3$/;"	f
GetCacheTime	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:GetCacheTime(cfile) abort "{{{3$/;"	f
GetCmd	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! s:GetCmd(vcstype, cmd)$/;"	f
GetCommentDefinition	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetCommentDefinition(beg, end, comment_mode, ...) abort$/;"	f
GetCommentDefinitionForType	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetCommentDefinitionForType(beg, end, comment_mode, filetype) abort "{{{3$/;"	f
GetCommentReplace	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetCommentReplace(cdef, cms0) abort$/;"	f
GetFiletype	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetFiletype(...) abort "{{{3$/;"	f
GetModdedChar	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:GetModdedChar(world) "{{{3$/;"	f
GetNthElement	bundle/tlib_vim/autoload/tlib/list.vim	/^function! s:GetNthElement(n, lists, default) abort "{{{3$/;"	f
GetScopes	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:GetScopes() abort$/;"	f
GetSnippetIndent	bundle/vim-snipmate/indent/snippets.vim	/^function! GetSnippetIndent()$/;"	f
GetStartEnd	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetStartEnd(beg, end, comment_mode) abort "{{{3$/;"	f
GetSyntaxName	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetSyntaxName(lnum, col) abort "{{{3$/;"	f
GetTempOption	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GetTempOption(name, default) abort "{{{3$/;"	f
GetValue	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:GetValue(cfile, default) abort "{{{3$/;"	f
GetValueType	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! s:GetValueType(def) abort "{{{3$/;"	f
Glob	bundle/vim-snipmate/autoload/snipMate.vim	/^	function! s:Glob(path, expr)$/;"	f
GlobPath	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:GlobPath(dirs, depth)$/;"	f
GuessCommentMode	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GuessCommentMode(comment_mode, supported_comment_modes) abort "{{{3$/;"	f
GuessCustomCommentString	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GuessCustomCommentString(ft, comment_mode, ...) abort$/;"	f
GuessFileType	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GuessFileType(beg, end, comment_mode, filetype, ...) abort$/;"	f
GuessVimOptionsCommentString	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:GuessVimOptionsCommentString(comment_mode) abort$/;"	f
Helptags	autoload/pathogen.vim	/^command! -bar Helptags :call pathogen#helptags()$/;"	c
HiDefaults	bundle/vim-rails/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
Init	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:Init(world, cmd) "{{{3$/;"	f
InlineReplacement	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:InlineReplacement(text, rx, tokens, replacements) abort "{{{3$/;"	f
InsertSelectedItems	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:InsertSelectedItems(rv, current) abort "{{{3$/;"	f
InstanceFound	bundle/vim-snipmate/t/parser.vim	/^        function! InstanceFound(list)$/;"	f
Intersection	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! s:Intersection(a, b)$/;"	f
Invert	bundle/vim-rails/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
KeyLoop	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:KeyLoop()$/;"	f
KeyMap.Add	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap.All	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.FindFor	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.Invoke	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Remove	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.bind	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.invoke	bundle/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
MapNextFamily	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd) abort$/;"	f
MapNorms	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapNorms()$/;"	f
MapOp	bundle/tcomment_vim/plugin/tcomment.vim	/^function! s:MapOp(name, extra, op, invoke) "{{{3$/;"	f
MapSpecs	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MapSpecs()$/;"	f
MarkToOpen	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MarkToOpen()$/;"	f
MatchIt	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchIt(items, pat, limit, exc)$/;"	f
MatchedItems	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:MatchedItems(items, pat, limit)$/;"	f
MenuController.New	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Move	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Move(cmd, count, map) abort$/;"	f
MoveSelectionDown	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionDown(count) abort$/;"	f
MoveSelectionUp	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionUp(count) abort$/;"	f
NERDTree	bundle/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree.AddPathFilter	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.Close	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CloseIfQuitOnOpen	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CloseIfQuitOnOpen()$/;"	f
NERDTree.CursorToBookmarkTable	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin()$/;"	f
NERDTree.ExistsForBuf	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.GetWinNum	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.MustBeOpen	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.changeRoot	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.getRoot	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.isTabTree	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.previousBuf	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.render	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
NERDTree.setPreviousBuf	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTreeAddKeyMap	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeCopyNode	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeFocus	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeHijackNetrw	bundle/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMoveNode	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealInFinder	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NEVER	bundle/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
Notifier.AddListener	bundle/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.GetListenersForEvent	bundle/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
Notifier.GetListenersMap	bundle/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.NotifyListeners	bundle/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
Open	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Open()$/;"	f
OpenMulti	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenMulti(...)$/;"	f
OpenNoMarks	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:OpenNoMarks(md, line)$/;"	f
Opener.New	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._bufInWindows	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener._newSplit	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener._openDirectory	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._openFile	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._previousWindow	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener.open	bundle/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
Parse	bundle/vim-snipmate/t/parser.vim	/^        function! Parse(snippet, ...)$/;"	f
ParseArgs	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ParseArgs(beg, end, comment_mode, arglist) abort "{{{3$/;"	f
Path.AbsolutePathFor	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(path)$/;"	f
Path.Resolve	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.Slash	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._escChars	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path._ignorePatternMatches	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path._splitChunks	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path._str	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.equals	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortKey	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.getSortOrderIndex	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path.isAncestor	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(path)$/;"	f
Path.isUnder	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.isUnixHiddenFile	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.readInfoFromDisk	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	bundle/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
Plog	bundle/vim-rails/autoload/rails.vim	/^function! s:Plog(bang, arg) abort$/;"	f
PopupmenuExists	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:PopupmenuExists()$/;"	f
Preview	bundle/vim-rails/autoload/rails.vim	/^function! s:Preview(bang, lnum, uri) abort$/;"	f
PrintFormat	bundle/tlib_vim/autoload/tlib/string.vim	/^function! s:PrintFormat(format, string) "{{{3$/;"	f
PrintMe	bundle/tlib_vim/samples/tlib/input/tlib_input_list.vim	/^function! PrintMe(state, items) "{{{3$/;"	f
Printf1	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:Printf1(fmt, expr) abort$/;"	f
ProcessLine	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ProcessLine(comment_do, match, checkRx, replace) abort$/;"	f
PrtAdd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtAdd(char)$/;"	f
PrtBS	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtBS()$/;"	f
PrtClear	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClear()$/;"	f
PrtClearCache	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtClearCache()$/;"	f
PrtCurEnd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurEnd()$/;"	f
PrtCurLeft	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurLeft()$/;"	f
PrtCurRight	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurRight()$/;"	f
PrtCurStart	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtCurStart()$/;"	f
PrtDelete	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDelete()$/;"	f
PrtDeleteEnt	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteEnt()$/;"	f
PrtDeleteMRU	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteMRU()$/;"	f
PrtDeleteWord	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtDeleteWord()$/;"	f
PrtExit	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExit()$/;"	f
PrtExpandDir	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtExpandDir()$/;"	f
PrtFocusMap	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtFocusMap(char)$/;"	f
PrtHistory	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtHistory(...)$/;"	f
PrtInsert	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtInsert(...)$/;"	f
PrtSelectJump	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectJump(char)$/;"	f
PrtSelectMove	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSelectMove(dir)$/;"	f
PrtSwitcher	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:PrtSwitcher()$/;"	f
PurgeTimestamp	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:PurgeTimestamp(dir) "{{{3$/;"	f
PutValue	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:PutValue(cfile, value) abort "{{{3$/;"	f
Rails	bundle/vim-rails/autoload/rails.vim	/^function! s:Rails(bang, count, arg) abort$/;"	f
Rails	bundle/vim-rails/plugin/rails.vim	/^command! -bang -bar -nargs=* -count -complete=customlist,rails#complete_rails Rails execute rails#command(<bang>0, '<mods>', !<count> && <line1> ? -1 : <count>, <q-args>)$/;"	c
RailsDetect	bundle/vim-rails/plugin/rails.vim	/^function! RailsDetect(...) abort$/;"	f
Rake	bundle/vim-rails/autoload/rails.vim	/^function! s:Rake(bang, lnum, arg) abort$/;"	f
ReadAutocmds	bundle/vim-snipmate/t/jumping.vim	/^            function! ReadAutocmds()$/;"	f
Refresh	bundle/vim-rails/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	bundle/vim-rails/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
Related	bundle/vim-rails/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
Render	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Render(lines, pat)$/;"	f
RepeatCommentstring	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:RepeatCommentstring(cdef) abort "{{{3$/;"	f
ReplaceInLine	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:ReplaceInLine(text) abort "{{{3$/;"	f
Reset	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Reset(args)$/;"	f
RestoreFrameParams	bundle/tlib_vim/autoload/tlib/vim.vim	/^function! s:RestoreFrameParams() "{{{3$/;"	f
RetabSnip	bundle/vim-snipmate/ftplugin/snippets.vim	/^command! -buffer -range=% RetabSnip$/;"	c
RewriteFormatString	bundle/tlib_vim/autoload/tlib/string.vim	/^function! s:RewriteFormatString(format, pattern, string) "{{{3$/;"	f
RubyExtract	bundle/vim-rails/autoload/rails.vim	/^function! s:RubyExtract(bang, mods, root, before, name) range abort$/;"	f
RunStateHandlers	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:RunStateHandlers(world) "{{{3$/;"	f
SID	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function s:SID()$/;"	f
SaveFrameParams	bundle/tlib_vim/autoload/tlib/vim.vim	/^function! s:SaveFrameParams() "{{{3$/;"	f
SelectOutput	bundle/tlib_vim/samples/tlib/input/tlib_input_list.vim	/^function! SelectOutput(ex) "{{{3$/;"	f
SetDefTxt	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetDefTxt()$/;"	f
SetFlag	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! s:SetFlag(def, opts, idx, flag, rest, flagdefs) abort "{{{3$/;"	f
SetOffset	bundle/tlib_vim/autoload/tlib/input.vim	/^function! s:SetOffset(world) "{{{3$/;"	f
SetOpt	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! s:SetOpt(def, opts, idx, opt) abort "{{{3$/;"	f
SetScrollBind	bundle/tlib_vim/autoload/tlib/file.vim	/^function! s:SetScrollBind(world) abort "{{{3$/;"	f
SetTimestamp	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:SetTimestamp(cfile, type) "{{{3$/;"	f
SetWD	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SetWD(args)$/;"	f
SetWhitespaceMode	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:SetWhitespaceMode(cdef) abort "{{{3$/;"	f
Setup	bundle/vim-snipmate/t/jumping.vim	/^function! Setup(snip) abort$/;"	f
ShouldPurge	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! s:ShouldPurge(partial_filename) "{{{3$/;"	f
SignId	bundle/tlib_vim/autoload/tlib/signs.vim	/^function! s:SignId(item) "{{{3$/;"	f
SnipMateDetect	bundle/vim-snipmate/plugin/snipMate.vim	/^augroup SnipMateDetect$/;"	a
SnipMateLoadScope	bundle/vim-snipmate/plugin/snipMate.vim	/^command! -bang -bar -nargs=+ SnipMateLoadScope$/;"	c
SnipMateOpenSnippetFiles	bundle/vim-snipmate/plugin/snipMate.vim	/^command! SnipMateOpenSnippetFiles call snipMate#OpenSnippetFiles()$/;"	c
SnipMateSource	bundle/vim-snipmate/autoload/snipMate.vim	/^augroup SnipMateSource$/;"	a
SortCompletions	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! s:SortCompletions(a, b) abort "{{{3$/;"	f
SpecInputs	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SpecInputs(str)$/;"	f
SplitPattern	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:SplitPattern(str)$/;"	f
StartColRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:StartColRx(comment_mode, col, ...) abort$/;"	f
StartLineRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:StartLineRx(pos) abort$/;"	f
StartPosRx	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:StartPosRx(comment_mode, line, col) abort$/;"	f
Strdisplaywidth	bundle/tcomment_vim/autoload/tcomment.vim	/^    function! s:Strdisplaywidth(...) abort "{{{3$/;"	f
Strdisplaywidth	bundle/tcomment_vim/autoload/tcomment.vim	/^    function! s:Strdisplaywidth(string, ...) abort "{{{3$/;"	f
Strwidth	bundle/tcomment_vim/autoload/tcomment.vim	/^    function! s:Strwidth(text) abort "{{{3$/;"	f
TBrowseOutput	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=1 -complete=command TBrowseOutput call tlib#cmd#BrowseOutput(<q-args>)$/;"	c
TBrowseScriptnames	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=0 -complete=command TBrowseScriptnames call tlib#cmd#TBrowseScriptnames()$/;"	c
TComment	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#CompleteArgs TComment$/;"	c
TCommentAs	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -complete=customlist,tcomment#Complete -range -nargs=+ TCommentAs $/;"	c
TCommentBlock	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#CompleteArgs TCommentBlock$/;"	c
TCommentInline	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#CompleteArgs TCommentInline$/;"	c
TCommentMaybeInline	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#CompleteArgs TCommentMaybeInline$/;"	c
TCommentRight	bundle/tcomment_vim/plugin/tcomment.vim	/^command! -bar -bang -range -nargs=* -complete=customlist,tcomment#CompleteArgs TCommentRight$/;"	c
TLet	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ TLet if !exists(matchstr(<q-args>, '^[^=[:space:]]\\+')) | exec 'let '. <q-args> | endif$/;"	c
TLib	bundle/tlib_vim/autoload/tlib/autocmdgroup.vim	/^augroup TLib$/;"	a
TLib	bundle/tlib_vim/autoload/tlib/file.vim	/^augroup TLib$/;"	a
TOVLWrite	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^augroup TOVLWrite$/;"	a
TRequire	bundle/tlib_vim/macros/tlib.vim	/^command! -nargs=+ TRequire let s:require = [<f-args>]$/;"	c
TScratch	bundle/tlib_vim/plugin/02tlib.vim	/^command! -bar -nargs=* -bang TScratch call tlib#scratch#UseScratch({'scratch_split': empty('<bang>'), <args>})$/;"	c
TVarArg	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ TVarArg exec tlib#arg#Let([<args>])$/;"	c
TestArgs	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs	bundle/tlib_vim/test/tlib.vim	/^function! TestArgs(...) "{{{3$/;"	f
TestArgs1	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs1	bundle/tlib_vim/test/tlib.vim	/^function! TestArgs1(...) "{{{3$/;"	f
TestArgs2	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs2	bundle/tlib_vim/test/tlib.vim	/^function! TestArgs2(...) "{{{3$/;"	f
TestArgs3	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestArgs3(...)$/;"	f
TestArgs3	bundle/tlib_vim/test/tlib.vim	/^function! TestArgs3(...)$/;"	f
TestGetArg	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg	bundle/tlib_vim/test/tlib.vim	/^function! TestGetArg(...) "{{{3$/;"	f
TestGetArg1	bundle/tlib_vim/spec/tlib/arg.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
TestGetArg1	bundle/tlib_vim/test/tlib.vim	/^function! TestGetArg1(...) "{{{3$/;"	f
Tlibassert	bundle/tcomment_vim/autoload/tcomment.vim	/^    command! -nargs=+ -bang Tlibassert :$/;"	c
Tlibassert	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibassert :$/;"	c
Tlibtrace	bundle/tcomment_vim/autoload/tcomment.vim	/^    command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtrace	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibtrace :$/;"	c
Tlibtraceset	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ -bang Tlibtraceset call tlib#trace#Set(tlib#arg#GetOpts([<f-args>], {'short': 0}), !empty("<bang>"))$/;"	c
Tlibtype	bundle/tcomment_vim/autoload/tcomment.vim	/^    command! -nargs=+ Tlibtype :$/;"	c
Tlibtype	bundle/tlib_vim/plugin/02tlib.vim	/^command! -nargs=+ Tlibtype :$/;"	c
ToggleByFname	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleByFname()$/;"	f
ToggleFocus	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleFocus()$/;"	f
ToggleKeyLoop	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleKeyLoop()$/;"	f
ToggleMRURelative	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleMRURelative()$/;"	f
ToggleRegex	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleRegex()$/;"	f
ToggleType	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ToggleType(dir)$/;"	f
Transform	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Transform(algorithm,type)$/;"	f
TransformOpfunc	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformOpfunc(type)$/;"	f
TransformSetup	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm)$/;"	f
TreeDirNode.AbsoluteTreeRoot	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode._glob	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode._initChildren	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openInNewTab	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.activate	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getChild	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode.open	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshDirFlags	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.refreshFlags	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.removeChild	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.sortChildren	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode._renderToString	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
TreeFileNode.activate	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.isRoot	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.open	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openInNewTab	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
Ttimecommand	bundle/tlib_vim/macros/tlib.vim	/^command! -nargs=1 -complete=command Ttimecommand call tlib#cmd#Time(<q-args>)$/;"	c
UI.IndentWid	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.MarkupReg	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI.New	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.UpDirLine	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
UI._dumpHelp	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI._indentLevelFor	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI._renderBookmarks	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI._stripMarkup	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line, removeLeadingSpaces)$/;"	f
UI.centerView	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI.getLineNum	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(file_node)$/;"	f
UI.getPath	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getRootLineNum	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFiles	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI.isIgnoreFilterEnabled	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.render	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.restoreScreenState	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI.toggleHelp	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFiles	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	bundle/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UndoHighlightLine	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! s:UndoHighlightLine() abort "{{{3$/;"	f
UnimpairedMapTransform	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! UnimpairedMapTransform(algorithm, key) abort$/;"	f
UnreplaceInLine	bundle/tcomment_vim/autoload/tcomment.vim	/^function! s:UnreplaceInLine(text) abort "{{{3$/;"	f
Update	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:Update(str)$/;"	f
UserCmd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:UserCmd(lscmd)$/;"	f
Validate	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! s:Validate(def, name, value) abort "{{{3$/;"	f
_parse_comments	bundle/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
abolish_l	bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	bundle/vim-rails/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
activateAll	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll()$/;"	f
activateBookmark	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm)$/;"	f
activateDirNode	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(node)$/;"	f
activateFileNode	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node)$/;"	f
add_methods	bundle/vim-rails/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_update_objects	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:add_update_objects(object, targets) abort$/;"	f
addfilecmds	bundle/vim-rails/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addtomrufs	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:addtomrufs(fname)$/;"	f
app_asset_path	bundle/vim-rails/autoload/rails.vim	/^function! s:app_asset_path() dict abort$/;"	f
app_commands	bundle/vim-rails/autoload/rails.vim	/^function! s:app_commands() dict abort$/;"	f
app_db_config	bundle/vim-rails/autoload/rails.vim	/^function! s:app_db_config(environment) dict$/;"	f
app_db_url	bundle/vim-rails/autoload/rails.vim	/^function! s:app_db_url(...) dict abort$/;"	f
app_dbext_settings	bundle/vim-rails/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict abort$/;"	f
app_default_locale	bundle/vim-rails/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_engines	bundle/vim-rails/autoload/rails.vim	/^function! s:app_engines() dict abort$/;"	f
app_environments	bundle/vim-rails/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_execute_rails_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_execute_rails_command(cmd) dict abort$/;"	f
app_file	bundle/vim-rails/autoload/rails.vim	/^function! s:app_file(name) dict abort$/;"	f
app_find_file	bundle/vim-rails/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_gems	bundle/vim-rails/autoload/rails.vim	/^function! s:app_gems() dict abort$/;"	f
app_generator_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_generator_command(bang, mods, ...) dict abort$/;"	f
app_generators	bundle/vim-rails/autoload/rails.vim	/^function! s:app_generators() dict abort$/;"	f
app_has	bundle/vim-rails/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	bundle/vim-rails/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_has_gem	bundle/vim-rails/autoload/rails.vim	/^function! s:app_has_gem(gem) dict abort$/;"	f
app_has_path	bundle/vim-rails/autoload/rails.vim	/^function! s:app_has_path(path) dict$/;"	f
app_has_rails5	bundle/vim-rails/autoload/rails.vim	/^function! s:app_has_rails5() abort dict$/;"	f
app_internal_load_path	bundle/vim-rails/autoload/rails.vim	/^function! s:app_internal_load_path() dict abort$/;"	f
app_migration	bundle/vim-rails/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	bundle/vim-rails/autoload/rails.vim	/^function! s:app_named_route_file(route_name) dict abort$/;"	f
app_output_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_output_command(count, code) dict$/;"	f
app_path	bundle/vim-rails/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_prepare_rails_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_prepare_rails_command(cmd) dict abort$/;"	f
app_projections	bundle/vim-rails/autoload/rails.vim	/^function! s:app_projections() dict abort$/;"	f
app_rake_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_rake_command(...) dict abort$/;"	f
app_rake_tasks	bundle/vim-rails/autoload/rails.vim	/^function! s:app_rake_tasks() dict abort$/;"	f
app_relglob	bundle/vim-rails/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_resolve_asset	bundle/vim-rails/autoload/rails.vim	/^function! s:app_resolve_asset(name, ...) dict abort$/;"	f
app_routes	bundle/vim-rails/autoload/rails.vim	/^function! s:app_routes() dict abort$/;"	f
app_ruby_script_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_ruby_script_command(cmd) dict abort$/;"	f
app_server_binding	bundle/vim-rails/autoload/rails.vim	/^function! s:app_server_binding() dict abort$/;"	f
app_server_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_server_command(kill, bg, arg) dict abort$/;"	f
app_server_pid	bundle/vim-rails/autoload/rails.vim	/^function! s:app_server_pid() dict abort$/;"	f
app_smart_projections	bundle/vim-rails/autoload/rails.vim	/^function! s:app_smart_projections() dict abort$/;"	f
app_start_rails_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_start_rails_command(cmd, ...) dict abort$/;"	f
app_static_rails_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_static_rails_command(cmd) dict abort$/;"	f
app_stylesheet_suffix	bundle/vim-rails/autoload/rails.vim	/^function! s:app_stylesheet_suffix() dict abort$/;"	f
app_tags_command	bundle/vim-rails/autoload/rails.vim	/^function! s:app_tags_command() dict abort$/;"	f
app_test_suites	bundle/vim-rails/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	bundle/vim-rails/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	bundle/vim-rails/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
argmaps	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:argmaps(md, i)$/;"	f
asset_cfile	bundle/vim-rails/autoload/rails.vim	/^function! s:asset_cfile() abort$/;"	f
at	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:at(str)$/;"	f
autocamelize	bundle/vim-rails/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autocmds	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:autocmds()$/;"	f
b:bar	bundle/tlib_vim/spec/tlib/var.vim	/^let b:bar = 3$/;"	v
b:bar	bundle/tlib_vim/test/tlib.vim	/^let b:bar = 3$/;"	v
b:did_ftplugin	bundle/vim-snipmate/ftplugin/snippets.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	bundle/vim-snipmate/indent/snippets.vim	/^let b:did_indent = 1$/;"	v
b:done_vimsnippets	bundle/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_count = 4$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_count = 6$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_no = 1$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stop_no = 5$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : { 'placeholder' : [[2, mirror]] },$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : { 'placeholder' : [stop] },$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 1 : {}, 2 : {} }$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = { 3 : {} }$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^            let b:snip_state.stops = {$/;"	v
b:snip_state	bundle/vim-snipmate/t/jumping.vim	/^        let b:snip_state = snipmate#jumping#state()$/;"	v
b:snipmate_visual	bundle/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "  foo\\nbar\\n  baz"$/;"	v
b:snipmate_visual	bundle/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "1\\n2\\n"$/;"	v
b:snipmate_visual	bundle/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = "1\\n2\\n3"$/;"	v
b:snipmate_visual	bundle/vim-snipmate/t/parser.vim	/^        let b:snipmate_visual = 'testvisual'$/;"	v
b:undo_ftplugin	bundle/vim-snipmate/ftplugin/snippets.vim	/^let b:undo_ftplugin = "setl et< sts< cms< fdm< fde<"$/;"	v
beep	bundle/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
buf_utils#GotoBuf	bundle/vim-addon-mw-utils/autoload/buf_utils.vim	/^fun! buf_utils#GotoBuf(buf_identifier, opts)$/;"	f
buffer_app	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_getline	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_setvar	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_type_name	bundle/vim-rails/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
buffunc	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buffunc(e)$/;"	f
buftab	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buftab(bufnr, md)$/;"	f
bufwins	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:bufwins(bufnr)$/;"	f
build_loc_info	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:build_loc_info(snippet, stops, lnum, col, seen_items) abort$/;"	f
build_stops	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:build_stops(snippet, stops, lnum, col, indent) abort$/;"	f
buildpat	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:buildpat(lst)$/;"	f
byfname	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:byfname()$/;"	f
cS	bundle/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache_clear	bundle/vim-rails/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	bundle/vim-rails/autoload/rails.vim	/^function! s:cache_get(...) dict abort$/;"	f
cache_needs	bundle/vim-rails/autoload/rails.vim	/^function! s:cache_needs(key, ...) dict abort$/;"	f
cache_set	bundle/vim-rails/autoload/rails.vim	/^function! s:cache_set(key, value, ...) dict abort$/;"	f
cached_file_contents#CachedFileContents	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^function! cached_file_contents#CachedFileContents(file, func, ...) abort$/;"	f
cached_file_contents#ClearScanCache	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#ClearScanCache()$/;"	f
cached_file_contents#Test	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^fun! cached_file_contents#Test()$/;"	f
cachefile	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:cachefile()$/;"	f
cfile_delegate	bundle/vim-rails/autoload/rails.vim	/^function! s:cfile_delegate(expr) abort$/;"	f
chCwd	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node)$/;"	f
chRoot	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node)$/;"	f
changelist	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:changelist(bufnr)$/;"	f
changesurround	bundle/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
checkbuf	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:checkbuf()$/;"	f
chknearby	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:chknearby(pat)$/;"	f
choices	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:choices(str, choices, func, args)$/;"	f
chop	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:chop(mrufs)$/;"	f
closeChildren	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node)$/;"	f
closeCurrentDir	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node)$/;"	f
closeTreeWindow	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	bundle/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
co	bundle/vim-unimpaired/plugin/unimpaired.vim	/^  nmap co =o$/;"	m
color_efm	bundle/vim-rails/autoload/rails.vim	/^function! s:color_efm(pre, before, after)$/;"	f
combine_projections	bundle/vim-rails/autoload/rails.vim	/^function! s:combine_projections(dest, src, ...) abort$/;"	f
comparent	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comparent(...)$/;"	f
compfnlen	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compfnlen(...)$/;"	f
complete	bundle/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
completion_filter	bundle/vim-rails/autoload/rails.vim	/^function! s:completion_filter(results, A, ...) abort$/;"	f
compmatlen	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmatlen(...)$/;"	f
compmreb	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmreb(...)$/;"	f
compmref	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compmref(...)$/;"	f
comptime	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:comptime(...)$/;"	f
compval	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:compval(...)$/;"	f
compval	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:compval(...)$/;"	f
conque_term#bell	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#bell() " {{{$/;"	f
conque_term#call_hooks	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#call_hooks(event, t_obj) " {{{$/;"	f
conque_term#close_all	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#close_all() "{{{$/;"	f
conque_term#create_terminal_object	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#create_terminal_object(...) " {{{$/;"	f
conque_term#dependency_check	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#dependency_check() " {{{$/;"	f
conque_term#exec_file	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#exec_file() "{{{$/;"	f
conque_term#fail	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#fail(feature) " {{{$/;"	f
conque_term#find_python_exe	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#find_python_exe() " {{{$/;"	f
conque_term#get_instance	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#get_instance(...) " {{{$/;"	f
conque_term#init	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#init() " {{{$/;"	f
conque_term#init_conceal_color	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#init_conceal_color() " {{{$/;"	f
conque_term#key_press	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#key_press() "{{{$/;"	f
conque_term#load_python	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#load_python() " {{{$/;"	f
conque_term#on_blur	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#on_blur() " {{{$/;"	f
conque_term#on_focus	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#on_focus(...) " {{{$/;"	f
conque_term#open	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#open(...) "{{{$/;"	f
conque_term#read_all	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#read_all(insert_mode) "{{{$/;"	f
conque_term#register_function	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#register_function(event, function_name) " {{{$/;"	f
conque_term#resume_session	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#resume_session() " {{{$/;"	f
conque_term#send_file	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#send_file() "{{{$/;"	f
conque_term#send_selected	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#send_selected(type) "{{{$/;"	f
conque_term#set_buffer_settings	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#set_buffer_settings(command, vim_startup_commands) "{{{$/;"	f
conque_term#set_mappings	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#set_mappings(action) "{{{$/;"	f
conque_term#subprocess	bundle/Conque-Shell/autoload/conque_term.vim	/^function! conque_term#subprocess(command) " {{{$/;"	f
controller	bundle/vim-rails/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerList	bundle/vim-rails/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
count	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^function! s:count(haystack, needle) abort$/;"	f
crc_vim_table	bundle/tlib_vim/scripts/create_crc_table.rb	/^def crc_vim_table$/;"	f
create_mirror_stub	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:create_mirror_stub(mirror, dict)$/;"	f
cs	bundle/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
ctrlp#acceptfile	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#acceptfile(...)$/;"	f
ctrlp#bookmarkdir#accept	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#accept(mode, str)$/;"	f
ctrlp#bookmarkdir#add	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#add(dir, ...)$/;"	f
ctrlp#bookmarkdir#id	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#id()$/;"	f
ctrlp#bookmarkdir#init	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#init()$/;"	f
ctrlp#bookmarkdir#remove	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! ctrlp#bookmarkdir#remove(entries)$/;"	f
ctrlp#buffers	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#buffers(...)$/;"	f
ctrlp#buffertag#accept	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#accept(mode, str)$/;"	f
ctrlp#buffertag#cmd	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#cmd(mode, ...)$/;"	f
ctrlp#buffertag#exit	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#exit()$/;"	f
ctrlp#buffertag#init	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#init(fname)$/;"	f
ctrlp#buffertag#opts	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! ctrlp#buffertag#opts()$/;"	f
ctrlp#call	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#call(func, ...)$/;"	f
ctrlp#changes#accept	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#accept(mode, str)$/;"	f
ctrlp#changes#cmd	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#cmd(mode, ...)$/;"	f
ctrlp#changes#exit	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#exit()$/;"	f
ctrlp#changes#init	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! ctrlp#changes#init(original_bufnr, bufnr)$/;"	f
ctrlp#clr	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clr(...)$/;"	f
ctrlp#clra	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#clra()$/;"	f
ctrlp#complen	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#complen(...)$/;"	f
ctrlp#dir#accept	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#accept(mode, str)$/;"	f
ctrlp#dir#id	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#id()$/;"	f
ctrlp#dir#init	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! ctrlp#dir#init(...)$/;"	f
ctrlp#dirnfile	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#dirnfile(entries)$/;"	f
ctrlp#exit	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#exit()$/;"	f
ctrlp#files	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#files()$/;"	f
ctrlp#getcline	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getcline()$/;"	f
ctrlp#getmarkedlist	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getmarkedlist()$/;"	f
ctrlp#getvar	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#getvar(var)$/;"	f
ctrlp#hicheck	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#hicheck(grp, defgrp)$/;"	f
ctrlp#igncwd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#igncwd(cwd)$/;"	f
ctrlp#init	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#init(type, ...)$/;"	f
ctrlp#j2l	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#j2l(nr)$/;"	f
ctrlp#line#accept	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#accept(mode, str)$/;"	f
ctrlp#line#cmd	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#cmd(mode, ...)$/;"	f
ctrlp#line#init	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! ctrlp#line#init(bufnr)$/;"	f
ctrlp#mixed#id	bundle/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#id()$/;"	f
ctrlp#mixed#init	bundle/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! ctrlp#mixed#init(clim)$/;"	f
ctrlp#modfilecond	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#modfilecond(w)$/;"	f
ctrlp#mrufiles#add	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#add(fn)$/;"	f
ctrlp#mrufiles#bufs	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#bufs()$/;"	f
ctrlp#mrufiles#cachefile	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#cachefile()$/;"	f
ctrlp#mrufiles#init	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#init()$/;"	f
ctrlp#mrufiles#list	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#list(...)$/;"	f
ctrlp#mrufiles#opts	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#opts()$/;"	f
ctrlp#mrufiles#refresh	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#refresh(...)$/;"	f
ctrlp#mrufiles#remove	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#remove(files)$/;"	f
ctrlp#mrufiles#tgrel	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! ctrlp#mrufiles#tgrel()$/;"	f
ctrlp#normcmd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#normcmd(cmd, ...)$/;"	f
ctrlp#nosy	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#nosy()$/;"	f
ctrlp#progress	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#progress(enum, ...)$/;"	f
ctrlp#prtclear	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#prtclear()$/;"	f
ctrlp#quickfix#accept	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#accept(mode, str)$/;"	f
ctrlp#quickfix#id	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#id()$/;"	f
ctrlp#quickfix#init	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! ctrlp#quickfix#init()$/;"	f
ctrlp#recordhist	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#recordhist()$/;"	f
ctrlp#rmbasedir	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#rmbasedir(items)$/;"	f
ctrlp#rtscript#id	bundle/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#id()$/;"	f
ctrlp#rtscript#init	bundle/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! ctrlp#rtscript#init(caching)$/;"	f
ctrlp#setdir	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setdir(path, ...)$/;"	f
ctrlp#setlcdir	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlcdir()$/;"	f
ctrlp#setlines	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#setlines(...)$/;"	f
ctrlp#statusline	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#statusline()$/;"	f
ctrlp#switchtype	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#switchtype(id)$/;"	f
ctrlp#syntax	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#syntax()$/;"	f
ctrlp#tabcount	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! ctrlp#tabcount()$/;"	f
ctrlp#tag#accept	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#accept(mode, str)$/;"	f
ctrlp#tag#enter	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#enter()$/;"	f
ctrlp#tag#id	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#id()$/;"	f
ctrlp#tag#init	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! ctrlp#tag#init()$/;"	f
ctrlp#undo#accept	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#accept(mode, str)$/;"	f
ctrlp#undo#enter	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#enter()$/;"	f
ctrlp#undo#exit	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#exit()$/;"	f
ctrlp#undo#id	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#id()$/;"	f
ctrlp#undo#init	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! ctrlp#undo#init()$/;"	f
ctrlp#utils#cachedir	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachedir()$/;"	f
ctrlp#utils#cachefile	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#cachefile(...)$/;"	f
ctrlp#utils#fnesc	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#fnesc(path, type, ...)$/;"	f
ctrlp#utils#glob	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#glob(...)$/;"	f
ctrlp#utils#globpath	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#globpath(...)$/;"	f
ctrlp#utils#lash	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#lash()$/;"	f
ctrlp#utils#mkdir	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#mkdir(dir)$/;"	f
ctrlp#utils#opts	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#opts()$/;"	f
ctrlp#utils#readfile	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#readfile(file)$/;"	f
ctrlp#utils#writecache	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! ctrlp#utils#writecache(lines, ...)$/;"	f
current_compiler	bundle/vim-rails/compiler/rails.vim	/^let current_compiler = "rails"$/;"	v
cursor_options	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:cursor_options() abort$/;"	f
d.Continue	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.Continue()$/;"	f
d.CurrentItem	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.CurrentItem()$/;"	f
d.DoContinue	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.DoContinue(v)$/;"	f
d.FilterFromKeyboard	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterFromKeyboard(keep, start, ...)$/;"	f
d.FilterItem	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilterItem(items, filter, cursorAt)$/;"	f
d.FilteredItems	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.FilteredItems()$/;"	f
d.MapToOriginal	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.MapToOriginal(v)$/;"	f
d.NewBufferAndInit	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.NewBufferAndInit()$/;"	f
d.RemoveFilters	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.RemoveFilters()$/;"	f
d.SelectByIdOrFilter	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.SelectByIdOrFilter()$/;"	f
d.ShowAppliedFilters	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ShowAppliedFilters()$/;"	f
d.ToggleAlignment	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.ToggleAlignment()$/;"	f
d.UpdateDisplay	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^  fun d.UpdateDisplay()$/;"	f
debug	bundle/vim-rails/autoload/rails.vim	/^function! s:debug(str)$/;"	f
define_navcommand	bundle/vim-rails/autoload/rails.vim	/^function! s:define_navcommand(name, projection, ...) abort$/;"	f
delent	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:delent(rfunc)$/;"	f
deleteBookmark	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bm)$/;"	f
deprecate	bundle/vim-rails/autoload/rails.vim	/^function! s:deprecate(old, new, ...) abort$/;"	f
dict2list	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:dict2list(dict)$/;"	f
dictindex	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dictindex(dict, expr)$/;"	f
dircompl	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dircompl(be, sd)$/;"	f
dismrk	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dismrk()$/;"	f
displayHelp	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp()$/;"	f
doau_user	bundle/vim-rails/plugin/rails.vim	/^function! s:doau_user(arg) abort$/;"	f
dohighlight	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dohighlight()$/;"	f
dosigns	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:dosigns()$/;"	f
dosurround	bundle/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_relative	bundle/vim-rails/autoload/rails.vim	/^function! s:dot_relative(path) abort$/;"	f
dotcmp	bundle/vim-rails/autoload/rails.vim	/^function! s:dotcmp(i1, i2)$/;"	f
ds	bundle/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
edit	bundle/vim-rails/autoload/rails.vim	/^function! s:edit(cmd, file) abort$/;"	f
editcmdfor	bundle/vim-rails/autoload/rails.vim	/^function! s:editcmdfor(cmd) abort$/;"	f
elapsed	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:elapsed(nr)$/;"	f
endof	bundle/vim-rails/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
endswith	bundle/vim-rails/autoload/rails.vim	/^function! s:endswith(string,suffix)$/;"	f
entries	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:entries(path)$/;"	f
env_reload#ReloadEnv	bundle/vim-addon-mw-utils/autoload/env_reload.vim	/^fun! env_reload#ReloadEnv(bash_export_command_output)$/;"	f
environment	bundle/vim-rails/autoload/rails.vim	/^function! s:environment()$/;"	f
error	bundle/vim-rails/autoload/rails.vim	/^function! s:error(str) abort$/;"	f
error	bundle/vim-rails/plugin/rails.vim	/^function! s:error(str)$/;"	f
escarg	bundle/vim-rails/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	bundle/vim-rails/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
esctagscmd	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:esctagscmd(bin, args, ...)$/;"	f
excl	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:excl(fn)$/;"	f
execextvar	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:execextvar(key)$/;"	f
exectags	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectags(cmd)$/;"	f
exectagsonfile	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:exectagsonfile(fname, ftype)$/;"	f
expand_placeholder	bundle/vim-rails/autoload/rails.vim	/^function! s:expand_placeholder(placeholder, expansions) abort$/;"	f
expand_placeholders	bundle/vim-rails/autoload/rails.vim	/^function! s:expand_placeholders(string, placeholders) abort$/;"	f
expect	bundle/vim-snipmate/t/parser.vim	/^        let expect = ['a x ', [2, '(', [3, { 'pat' : 'a', 'sub' : 'b' }], ')']]$/;"	v
expect	bundle/vim-snipmate/t/parser.vim	/^        let expect = [[[1, { 'pat' : 'abc', 'sub' : 'def' }]]]$/;"	v
expect	bundle/vim-snipmate/t/parser.vim	/^        let expect = [[[1234567890]]]$/;"	v
expect	bundle/vim-snipmate/t/parser.vim	/^        let expect[0][0][1].flags = ''$/;"	v
expect	bundle/vim-snipmate/t/parser.vim	/^        let expect[0][0][1].flags = 'g'$/;"	v
extend_projection	bundle/vim-rails/autoload/rails.vim	/^function! s:extend_projection(dest, src) abort$/;"	f
extractafter	bundle/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	bundle/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
file_getline	bundle/vim-rails/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	bundle/vim-rails/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	bundle/vim-rails/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	bundle/vim-rails/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
filter	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:filter(tags)$/;"	f
find	bundle/vim-rails/autoload/rails.vim	/^function! s:find(cmd, file) abort$/;"	f
findAndRevealPath	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath()$/;"	f
findamethod	bundle/vim-rails/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasset	bundle/vim-rails/autoload/rails.vim	/^function! s:findasset(path, dir) abort$/;"	f
findasymbol	bundle/vim-rails/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	bundle/vim-rails/autoload/rails.vim	/^function! s:findcmdfor(cmd) abort$/;"	f
findcommon	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findcommon(items, seed)$/;"	f
findcount	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:findcount(str)$/;"	f
findfromview	bundle/vim-rails/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	bundle/vim-rails/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	bundle/vim-rails/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findroot	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:findroot(curr, mark, depth, type)$/;"	f
findview	bundle/vim-rails/autoload/rails.vim	/^function! s:findview(name) abort$/;"	f
fixindent	bundle/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	bundle/vim-rails/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
flatten	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:flatten(tree, cur)$/;"	f
fnameescape	bundle/vim-rails/autoload/rails.vim	/^function! s:fnameescape(file) abort$/;"	f
fnameescape	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:fnameescape(file) abort$/;"	f
fnesc	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:fnesc(...)$/;"	f
foldmarker	bundle/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
format	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:format(...)$/;"	f
format	bundle/vim-rails/autoload/rails.vim	/^function! s:format()$/;"	f
formatline	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:formatline(str)$/;"	f
formatul	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:formatul(...)$/;"	f
funcref#Call	bundle/vim-addon-mw-utils/autoload/funcref.vim	/^function! funcref#Call(...)$/;"	f
funcref#Function	bundle/vim-addon-mw-utils/autoload/funcref.vim	/^function! funcref#Function(name,...)$/;"	f
function	bundle/vim-rails/autoload/rails.vim	/^function! s:function(name) abort$/;"	f
function	bundle/vim-rails/plugin/rails.vim	/^function! s:function(name)$/;"	f
fuzzyglob	bundle/vim-rails/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g:ConqueTerm_CWInsert	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_CWInsert = 0$/;"	v
g:ConqueTerm_CloseOnEnd	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_CloseOnEnd = 0$/;"	v
g:ConqueTerm_CodePage	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_CodePage = 0$/;"	v
g:ConqueTerm_Color	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_Color = 1$/;"	v
g:ConqueTerm_ColorMode	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_ColorMode = ''$/;"	v
g:ConqueTerm_EscKey	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_EscKey = '<Esc>'$/;"	v
g:ConqueTerm_ExecFileKey	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_ExecFileKey = '<F11>'$/;"	v
g:ConqueTerm_FastMode	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_FastMode = 0$/;"	v
g:ConqueTerm_Idx	bundle/Conque-Shell/autoload/conque_term.vim	/^let g:ConqueTerm_Idx = 0$/;"	v
g:ConqueTerm_Idx	bundle/Conque-Shell/plugin/conque_term.vim	/^let g:ConqueTerm_Idx = 0$/;"	v
g:ConqueTerm_InsertCharPre	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_InsertCharPre = 0$/;"	v
g:ConqueTerm_InsertOnEnter	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_InsertOnEnter = 0$/;"	v
g:ConqueTerm_Loaded	bundle/Conque-Shell/plugin/conque_term.vim	/^let g:ConqueTerm_Loaded = 1$/;"	v
g:ConqueTerm_PromptRegex	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_PromptRegex = '^\\w\\+@[0-9A-Za-z_.-]\\+:[0-9A-Za-z_.\/\\~,:-]\\+\\$'$/;"	v
g:ConqueTerm_PyExe	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_PyExe = ''$/;"	v
g:ConqueTerm_PyVersion	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_PyVersion = 2$/;"	v
g:ConqueTerm_ReadUnfocused	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_ReadUnfocused = 0$/;"	v
g:ConqueTerm_SendFileKey	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_SendFileKey = '<F10>'$/;"	v
g:ConqueTerm_SendFunctionKeys	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_SendFunctionKeys = 0$/;"	v
g:ConqueTerm_SendVisKey	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_SendVisKey = '<F9>'$/;"	v
g:ConqueTerm_SessionSupport	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_SessionSupport = 0$/;"	v
g:ConqueTerm_StartMessages	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_StartMessages = 1$/;"	v
g:ConqueTerm_Syntax	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_Syntax = 'conque_term'$/;"	v
g:ConqueTerm_TERM	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_TERM =  'vt100'$/;"	v
g:ConqueTerm_Terminals	bundle/Conque-Shell/autoload/conque_term.vim	/^let g:ConqueTerm_Terminals = {}$/;"	v
g:ConqueTerm_TerminalsString	bundle/Conque-Shell/autoload/conque_term.vim	/^let g:ConqueTerm_TerminalsString = ''$/;"	v
g:ConqueTerm_ToggleKey	bundle/Conque-Shell/plugin/conque_term.vim	/^    let g:ConqueTerm_ToggleKey = '<F8>'$/;"	v
g:ConqueTerm_Version	bundle/Conque-Shell/plugin/conque_term.vim	/^let g:ConqueTerm_Version = 210$/;"	v
g:NERDTree	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoDeleteBuffer	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeCreator	bundle/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirNode	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	bundle/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeIgnore	bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeKeyMap	bundle/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMenuController	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuItem	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeOpener	bundle/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	bundle/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	bundle/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeSortOrder	bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}"$/;"	v
g:NERDTreeUI	bundle/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:autoloaded_rails	bundle/vim-rails/autoload/rails.vim	/^let g:autoloaded_rails = '5.3'$/;"	v
g:bar	bundle/tlib_vim/spec/tlib/var.vim	/^let g:bar = 2$/;"	v
g:bar	bundle/tlib_vim/test/tlib.vim	/^let g:bar = 2$/;"	v
g:eval_a	bundle/tlib_vim/spec/tlib/eval.vim	/^let g:eval_a = {'foo': range(0, 5), 'd': {'a': range(0, 5)}}$/;"	v
g:eval_a0	bundle/tlib_vim/spec/tlib/eval.vim	/^let g:eval_a0 = deepcopy(g:eval_a)$/;"	v
g:eval_b	bundle/tlib_vim/spec/tlib/eval.vim	/^let g:eval_b = {'foo': range(6, 10), 'd': {'a': range(6, 10), 'b': 2}, 'bar': range(5)}$/;"	v
g:eval_b0	bundle/tlib_vim/spec/tlib/eval.vim	/^let g:eval_b0 = deepcopy(g:eval_b)$/;"	v
g:eval_c	bundle/tlib_vim/spec/tlib/eval.vim	/^let g:eval_c = {'foo': range(0, 10), 'd': {'a': range(0, 10), 'b': 2}, 'bar': range(5)}$/;"	v
g:foo	bundle/tlib_vim/spec/tlib/var.vim	/^let g:foo = 1$/;"	v
g:foo	bundle/tlib_vim/test/tlib.vim	/^let g:foo = 1$/;"	v
g:foo	bundle/vim-snipmate/t/parser.vim	/^        let g:foo = 'bar'$/;"	v
g:loaded_ctrlp	bundle/ctrlp.vim/plugin/ctrlp.vim	/^let g:loaded_ctrlp = 1$/;"	v
g:loaded_ctrlp_bookmarkdir	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let g:loaded_ctrlp_bookmarkdir = 1$/;"	v
g:loaded_ctrlp_buftag	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let g:loaded_ctrlp_buftag = 1$/;"	v
g:loaded_ctrlp_changes	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^let g:loaded_ctrlp_changes = 1$/;"	v
g:loaded_ctrlp_line	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^let g:loaded_ctrlp_line = 1$/;"	v
g:loaded_ctrlp_quickfix	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let g:loaded_ctrlp_quickfix = 1$/;"	v
g:loaded_ctrlp_tag	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^let g:loaded_ctrlp_tag = 1$/;"	v
g:loaded_ctrlp_undo	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^let g:loaded_ctrlp_undo = 1$/;"	v
g:loaded_nerdtree_autoload	bundle/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_pathogen	autoload/pathogen.vim	/^let g:loaded_pathogen = 1$/;"	v
g:loaded_rails	bundle/vim-rails/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_surround	bundle/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tlib	bundle/tlib_vim/plugin/02tlib.vim	/^let g:loaded_tlib = 124$/;"	v
g:loaded_unimpaired	bundle/vim-unimpaired/plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:snipMate	bundle/vim-snipmate/autoload/snipMate.vim	/^  let g:snipMate = {}$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate = {}$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.cpp =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.cu =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.eruby =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.html =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.less =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.mxml =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.objc =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.php =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.scss =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.ur =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snipMate.scope_aliases.xhtml =$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate.scope_aliases = get(g:snipMate, 'scope_aliases', {})$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['get_scopes'] = get(g:snipMate, 'get_scopes', funcref#Function('return split(&ft,"\\\\.")+[&syntax, "_"]'))$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['get_snippets'] = get(g:snipMate, 'get_snippets', funcref#Function("snipMate#GetSnippets"))$/;"	v
g:snipMate	bundle/vim-snipmate/plugin/snipMate.vim	/^let g:snipMate['no_match_completion_feedkeys_chars'] =$/;"	v
g:snipMateSources	bundle/vim-snipmate/plugin/snipMate.vim	/^  let g:snipMateSources = {}$/;"	v
g:snipMateSources	bundle/vim-snipmate/plugin/snipMate.vim	/^  let g:snipMateSources['default'] = funcref#Function('snipMate#DefaultPool')$/;"	v
g:snips_author	bundle/vim-snipmate/plugin/snipMate.vim	/^	let g:snips_author = 'Me'$/;"	v
g:snips_author	bundle/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	bundle/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	bundle/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:spec_tlib_list	bundle/tlib_vim/spec/tlib/input.vim	/^let g:spec_tlib_list = [10, 20, 30, 40, 'a50', 'aa60', 'b70', 'ba80', 90]$/;"	v
g:tcomment#blank_lines	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#blank_lines = 2    "{{{2$/;"	v
g:tcomment#filetype_map	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#filetype_map = {$/;"	v
g:tcomment#ignore_char_type	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#ignore_char_type = 1   "{{{2$/;"	v
g:tcomment#ignore_comment_def	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#ignore_comment_def = []   "{{{2$/;"	v
g:tcomment#must_escape_expression_backslash	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#must_escape_expression_backslash = 0   "{{{2$/;"	v
g:tcomment#options_comments	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#options_comments = {'whitespace': get(g:tcommentOptions, 'whitespace', 'both')}   "{{{2$/;"	v
g:tcomment#options_commentstring	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#options_commentstring = {'whitespace': get(g:tcommentOptions, 'whitespace', 'both')}   "{{{2$/;"	v
g:tcomment#replacements_c	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#replacements_c = {$/;"	v
g:tcomment#replacements_xml	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#replacements_xml = {$/;"	v
g:tcomment#rstrip_on_uncomment	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#rstrip_on_uncomment = 1   "{{{2$/;"	v
g:tcomment#syntax_substitute	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcomment#syntax_substitute = {$/;"	v
g:tcommentBlockC	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentBlockC = {$/;"	v
g:tcommentBlockC2	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentBlockC2 = {$/;"	v
g:tcommentBlockXML	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentBlockXML = {$/;"	v
g:tcommentGuessFileType	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType = 0   "{{{2$/;"	v
g:tcommentGuessFileType_blade	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_blade = 'html'   "{{{2$/;"	v
g:tcommentGuessFileType_django	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_django = 1   "{{{2$/;"	v
g:tcommentGuessFileType_dsl	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_dsl = 'xml'   "{{{2$/;"	v
g:tcommentGuessFileType_eruby	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_eruby = 1   "{{{2$/;"	v
g:tcommentGuessFileType_html	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_html = 1   "{{{2$/;"	v
g:tcommentGuessFileType_jinja	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_jinja = 'html'   "{{{2$/;"	v
g:tcommentGuessFileType_php	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_php = 'html'   "{{{2$/;"	v
g:tcommentGuessFileType_rnoweb	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_rnoweb = 'r'   "{{{2$/;"	v
g:tcommentGuessFileType_smarty	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_smarty = 1   "{{{2$/;"	v
g:tcommentGuessFileType_tskeleton	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_tskeleton = 1   "{{{2$/;"	v
g:tcommentGuessFileType_vim	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_vim = 1   "{{{2$/;"	v
g:tcommentGuessFileType_vue	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentGuessFileType_vue = 'html'   "{{{2$/;"	v
g:tcommentIgnoreTypes_php	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentIgnoreTypes_php = 'sql'   "{{{2$/;"	v
g:tcommentInlineC	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentInlineC = tcomment#GetLineC()$/;"	v
g:tcommentInlineXML	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentInlineXML = {$/;"	v
g:tcommentLineC_fmt	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentLineC_fmt = {$/;"	v
g:tcommentMapLeader1	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMapLeader1 = '<c-_>' "{{{2$/;"	v
g:tcommentMapLeader2	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMapLeader2 = '<Leader>_' "{{{2$/;"	v
g:tcommentMapLeaderCommentAnyway	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMapLeaderCommentAnyway = 'g>' "{{{2$/;"	v
g:tcommentMapLeaderOp1	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMapLeaderOp1 = 'gc' "{{{2$/;"	v
g:tcommentMapLeaderUncommentAnyway	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMapLeaderUncommentAnyway = 'g<' "{{{2$/;"	v
g:tcommentMaps	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentMaps = 1   "{{{2$/;"	v
g:tcommentModeExtra	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentModeExtra = ''   "{{{2$/;"	v
g:tcommentOpModeExtra	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentOpModeExtra = ''   "{{{2$/;"	v
g:tcommentOptions	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentOptions = {}   "{{{2$/;"	v
g:tcommentSyntaxMap	bundle/tcomment_vim/autoload/tcomment.vim	/^    let g:tcommentSyntaxMap = {$/;"	v
g:tcommentTextObjectInlineComment	bundle/tcomment_vim/plugin/tcomment.vim	/^    let g:tcommentTextObjectInlineComment = 'ic'   "{{{2$/;"	v
g:tlib#cmd#last_output	bundle/tlib_vim/autoload/tlib/cmd.vim	/^let g:tlib#cmd#last_output = []$/;"	v
g:tlib#date#date_format	bundle/tlib_vim/autoload/tlib/date.vim	/^let g:tlib#date#date_format = '%Y-%m-%d'$/;"	v
g:tlib#date#date_rx	bundle/tlib_vim/autoload/tlib/date.vim	/^let g:tlib#date#date_rx = '\\<\\(\\d\\{4}\\)-\\(\\d\\d\\)-\\(\\d\\d\\)\\>'$/;"	v
g:tlib#date#dayshift	bundle/tlib_vim/autoload/tlib/date.vim	/^let g:tlib#date#dayshift = 60 * 60 * 24$/;"	v
g:tlib#file#absolute_filename_rx	bundle/tlib_vim/autoload/tlib/file.vim	/^    let g:tlib#file#absolute_filename_rx = '^\\~\\?[\\\/]'   "{{{2$/;"	v
g:tlib#file#drop	bundle/tlib_vim/autoload/tlib/file.vim	/^    let g:tlib#file#drop = has('gui')   "{{{2$/;"	v
g:tlib#file#edit_cmds	bundle/tlib_vim/autoload/tlib/file.vim	/^    let g:tlib#file#edit_cmds = g:tlib#file#use_tabs ? {'buffer': 'tab split | buffer', 'edit': 'tabedit'} : {}  "{{{2$/;"	v
g:tlib#file#reject_rx	bundle/tlib_vim/autoload/tlib/file.vim	/^    let g:tlib#file#reject_rx = '\\%(^\\|[\\\/]\\)\\%(tags\\|Thumbs\\.db\\)$'   "{{{2$/;"	v
g:tlib#file#use_tabs	bundle/tlib_vim/autoload/tlib/file.vim	/^    let g:tlib#file#use_tabs = 0   "{{{2$/;"	v
g:tlib#hash#use_adler32	bundle/tlib_vim/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_adler32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	bundle/tlib_vim/autoload/tlib/hash.vim	/^    let g:tlib#hash#use_crc32 = ''   "{{{2$/;"	v
g:tlib#hash#use_crc32	bundle/tlib_vim/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = 'ruby'$/;"	v
g:tlib#hash#use_crc32	bundle/tlib_vim/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = 'vim'$/;"	v
g:tlib#hash#use_crc32	bundle/tlib_vim/spec/tlib/hash.vim	/^let g:tlib#hash#use_crc32 = g:tlib_hash_use_crc32$/;"	v
g:tlib#input#keyagents_InputList_m	bundle/tlib_vim/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_m = extend(g:tlib#input#keyagents_InputList_m, g:tlib_extend_keyagents_InputList_m)$/;"	v
g:tlib#input#keyagents_InputList_s	bundle/tlib_vim/autoload/tlib/input.vim	/^    let g:tlib#input#keyagents_InputList_s = extend(g:tlib#input#keyagents_InputList_s, g:tlib_extend_keyagents_InputList_s)$/;"	v
g:tlib#sys#check_cygpath	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#check_cygpath = g:tlib#sys#windows && tlib#sys#IsExecutable('cygpath', 1)   "{{{2$/;"	v
g:tlib#sys#cygwin_expr	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_expr = '"bash -c ''". escape(%s, "''\\\\") ."''"'   "{{{2$/;"	v
g:tlib#sys#cygwin_path_rx	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#cygwin_path_rx = '\/cygwin\/'   "{{{2$/;"	v
g:tlib#sys#null	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#null = g:tlib#sys#windows ? 'NUL' : (filereadable('\/dev\/null') ? '\/dev\/null' : '')    "{{{2$/;"	v
g:tlib#sys#special_protocols	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_protocols = ['https\\?', 'nntp', 'mailto']   "{{{2$/;"	v
g:tlib#sys#special_suffixes	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#special_suffixes = ['xlsx\\?', 'docx\\?', 'pptx\\?', 'accdb', 'mdb', 'sqlite', 'pdf', 'jpg', 'png', 'gif', 'od\\[tspg]']    "{{{2$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent ! RunDll32.EXE URL.DLL,FileProtocolHandler' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !'. g:netrw_browsex_viewer shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !gnome-open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !kfmclient exec' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !open' shellescape('%s')"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = "exec 'silent !xdg-open' shellescape('%s') '&'"$/;"	v
g:tlib#sys#system_browser	bundle/tlib_vim/autoload/tlib/sys.vim	/^        let g:tlib#sys#system_browser = ''$/;"	v
g:tlib#sys#system_rx	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#system_rx = printf('\\V\\%(\\^\\%(%s\\):\\|.\\%(%s\\)\\$\\)', join(g:tlib#sys#special_protocols, '\\|'), join(g:tlib#sys#special_suffixes, '\\|'))   "{{{2$/;"	v
g:tlib#sys#windows	bundle/tlib_vim/autoload/tlib/sys.vim	/^    let g:tlib#sys#windows = &shell !~ 'sh' && (has('win16') || has('win32') || has('win64'))   "{{{2$/;"	v
g:tlib#trace#backtrace	bundle/tlib_vim/autoload/tlib/trace.vim	/^    let g:tlib#trace#backtrace = 2   "{{{2$/;"	v
g:tlib#trace#hl	bundle/tlib_vim/autoload/tlib/trace.vim	/^    let g:tlib#trace#hl = {'error': 'ErrorMsg', 'fatal': 'ErrorMsg', 'warn': 'WarningMsg'}   "{{{2$/;"	v
g:tlib#trace#printer	bundle/tlib_vim/autoload/tlib/trace.vim	/^    let g:tlib#trace#printer = 'echom'   "{{{2$/;"	v
g:tlib#type#nil	bundle/tlib_vim/autoload/tlib/type.vim	/^let g:tlib#type#nil = []$/;"	v
g:tlib#vcs#executables	bundle/tlib_vim/autoload/tlib/vcs.vim	/^            let g:tlib#vcs#executables[s:cmd] = executable(s:cmd1) ? s:cmd1 : ''$/;"	v
g:tlib#vim#simalt_maximize	bundle/tlib_vim/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_maximize = 'x'   "{{{2$/;"	v
g:tlib#vim#simalt_restore	bundle/tlib_vim/autoload/tlib/vim.vim	/^        let g:tlib#vim#simalt_restore = 'r'   "{{{2$/;"	v
g:tlib#vim#use_vimtweak	bundle/tlib_vim/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_vimtweak = 0   "{{{2$/;"	v
g:tlib#vim#use_wmctrl	bundle/tlib_vim/autoload/tlib/vim.vim	/^        let g:tlib#vim#use_wmctrl = executable('wmctrl')  "{{{2$/;"	v
g:tlib#win#null_id	bundle/tlib_vim/autoload/tlib/win.vim	/^    let g:tlib#win#null_id = -1$/;"	v
g:tlib#win#null_id	bundle/tlib_vim/autoload/tlib/win.vim	/^    let g:tlib#win#null_id = {}$/;"	v
g:tlib#win#use_winid	bundle/tlib_vim/autoload/tlib/win.vim	/^    let g:tlib#win#use_winid = exists('*win_gotoid') && exists('*win_getid')   "{{{2$/;"	v
g:tlib_hash_use_crc32	bundle/tlib_vim/spec/tlib/hash.vim	/^let g:tlib_hash_use_crc32 = g:tlib#hash#use_crc32$/;"	v
g:unimpaired_html_entities	bundle/vim-unimpaired/plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
get_comment_format	bundle/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_option	bundle/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
getbookmarks	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getbookmarks()$/;"	f
getchar	bundle/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
getenv	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getenv()$/;"	f
getextvar	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getextvar(key)$/;"	f
gethistdata	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistdata()$/;"	f
gethistloc	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:gethistloc()$/;"	f
getinput	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getinput(...)$/;"	f
getinput	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:getinput(str, ...)$/;"	f
getlist	bundle/vim-rails/autoload/rails.vim	/^function! s:getlist(arg, key)$/;"	f
getnewmix	bundle/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:getnewmix(cwd, clim)$/;"	f
getparent	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getparent(item)$/;"	f
getregs	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:getregs()$/;"	f
getundo	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:getundo()$/;"	f
glbpath	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:glbpath(...)$/;"	f
glob#Glob	bundle/vim-addon-mw-utils/autoload/glob.vim	/^fun! glob#Glob(pattern, ...)$/;"	f
globdirs	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:globdirs(dirs, depth)$/;"	f
grab_visual	bundle/vim-snipmate/plugin/snipMate.vim	/^function! s:grab_visual() abort$/;"	f
gsub	bundle/vim-rails/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
handleLeftClick	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick()$/;"	f
handleMiddleMouse	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse()$/;"	f
headntail	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:headntail(str)$/;"	f
helpermethods	bundle/vim-rails/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
highlight	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:highlight(pat, grp)$/;"	f
ifilter	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ifilter(list, str)$/;"	f
ignore	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ignore()$/;"	f
indent	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:indent(count) abort$/;"	f
info_from_filename	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:info_from_filename(file) abort$/;"	f
initOpenURL	bundle/vim-rails/autoload/rails.vim	/^function! s:initOpenURL() abort$/;"	f
initVariable	bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
inputreplacement	bundle/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	bundle/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	bundle/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insert_snippet_text	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:insert_snippet_text(snippet, lnum, col, indent)$/;"	f
insertcache	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertcache(str)$/;"	f
insertstr	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:insertstr()$/;"	f
invertrange	bundle/vim-rails/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
is_embedded_ruby	bundle/vim-rails/autoload/rails.vim	/^function! s:is_embedded_ruby() abort$/;"	f
iscmdwin	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:iscmdwin()$/;"	f
ispathitem	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:ispathitem()$/;"	f
javascriptEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...) abort$/;"	f
javascriptList	bundle/vim-rails/autoload/rails.vim	/^function! s:javascriptList(A, L, P, ...) abort$/;"	f
join_consecutive_strings	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:join_consecutive_strings(list) abort$/;"	f
jump	bundle/vim-rails/autoload/rails.vim	/^function! s:jump(def, ...) abort$/;"	f
jumpToChild	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(currentNode, direction)$/;"	f
jumpToFirstChild	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node)$/;"	f
jumpToLastChild	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node)$/;"	f
jumpToNextSibling	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node)$/;"	f
jumpToParent	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node)$/;"	f
jumpToPrevSibling	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node)$/;"	f
jumpToRoot	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(currentNode, forward)$/;"	f
jumpargs	bundle/vim-rails/autoload/rails.vim	/^function! s:jumpargs(file, jump) abort$/;"	f
keyword_spacing	bundle/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
lash	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lash(...)$/;"	f
lash	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^fu! s:lash(...)$/;"	f
lastmethod	bundle/vim-rails/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	bundle/vim-rails/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	bundle/vim-rails/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
lastvisual	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lastvisual()$/;"	f
layoutEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:layoutEdit(cmd,...) abort$/;"	f
layoutList	bundle/vim-rails/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
leavepre	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:leavepre()$/;"	f
lineout	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:lineout(dict)$/;"	f
listize_mirror	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:listize_mirror(mirrors) abort$/;"	f
load_scopes	bundle/vim-snipmate/plugin/snipMate.vim	/^function! s:load_scopes(bang, ...) abort$/;"	f
loaded_nerd_tree	bundle/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	bundle/vim-snipmate/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_tcomment	bundle/tcomment_vim/plugin/tcomment.vim	/^let loaded_tcomment = 308$/;"	v
loaded_tlib_macros	bundle/tlib_vim/macros/tlib.vim	/^let loaded_tlib_macros = 1$/;"	v
localeEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	bundle/vim-rails/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
log	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:log(m)$/;"	f
log_detect	bundle/vim-rails/plugin/rails.vim	/^function! s:log_detect() abort$/;"	f
lsCmd	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:lsCmd()$/;"	f
main	bundle/tcomment_vim/spec/tcomment/issue30_test.c	/^int main()$/;"	f
main	bundle/tcomment_vim/spec/tcomment/issue30_test_2.c	/^int main()$/;"	f
main	bundle/tcomment_vim/spec/tcomment/issue30_test_3.c	/^int main()$/;"	f
make	bundle/vim-rails/autoload/rails.vim	/^function! s:make(bang, args, ...)$/;"	f
make_box	bundle/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
map	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:map(mode, lhs, rhs, ...) abort$/;"	f
map_if_not_mapped	bundle/vim-snipmate/after/plugin/snipMate.vim	/^function! s:map_if_not_mapped(lhs, rhs, mode) abort$/;"	f
match_type	bundle/vim-rails/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
match_window_opts	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:match_window_opts()$/;"	f
matchcursor	bundle/vim-rails/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matchfname	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchfname(item, pat)$/;"	f
matchlens	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchlens(str, pat, ...)$/;"	f
matchtabe	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabe(item, pat)$/;"	f
matchtabs	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:matchtabs(item, pat)$/;"	f
max	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:max(len, max)$/;"	f
maxf	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:maxf(len)$/;"	f
mergelists	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:mergelists()$/;"	f
mextargs	bundle/vim-rails/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
mfunc	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mfunc()$/;"	f
migemo	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:migemo(str)$/;"	f
migrationEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	bundle/vim-rails/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	bundle/vim-rails/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
mirror	bundle/vim-snipmate/t/jumping.vim	/^            let mirror = { 'line' : 0 }$/;"	v
mixedsort	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mixedsort(...)$/;"	f
mkeep	bundle/vim-rails/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
mmode	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mmode()$/;"	f
model	bundle/vim-rails/autoload/rails.vim	/^function! s:model(...)$/;"	f
modevar	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:modevar()$/;"	f
modify	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:modify(entry, type)$/;"	f
mods	bundle/vim-rails/autoload/rails.vim	/^function! s:mods(mods) abort$/;"	f
msg	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:msg(name, cwd)$/;"	f
mtype	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:mtype()$/;"	f
multipliers	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:multipliers(...)$/;"	f
narrowable	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:narrowable()$/;"	f
nerdtree#checkForBrowse	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir)$/;"	f
nerdtree#compareNodes	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2)$/;"	f
nerdtree#compareNodesBySortKey	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodesBySortKey(n1, n2)$/;"	f
nerdtree#completeBookmarks	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P)$/;"	f
nerdtree#deprecated	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...)$/;"	f
nerdtree#echo	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg)$/;"	f
nerdtree#echoError	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg)$/;"	f
nerdtree#echoWarning	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg)$/;"	f
nerdtree#exec	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd)$/;"	f
nerdtree#has_opt	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name)$/;"	f
nerdtree#loadClassFiles	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles()$/;"	f
nerdtree#postSourceActions	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions()$/;"	f
nerdtree#renderView	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView()$/;"	f
nerdtree#runningWindows	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows()$/;"	f
nerdtree#ui_glue#bookmarkNode	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...)$/;"	f
nerdtree#ui_glue#chRootCwd	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd()$/;"	f
nerdtree#ui_glue#clearBookmarks	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks)$/;"	f
nerdtree#ui_glue#createDefaultBindings	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings()$/;"	f
nerdtree#ui_glue#invokeKeyMap	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key)$/;"	f
nerdtree#ui_glue#openBookmark	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name)$/;"	f
nerdtree#ui_glue#revealBookmark	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name)$/;"	f
nerdtree#ui_glue#setupCommands	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands()$/;"	f
nerdtree#ui_glue#upDir	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(keepState)$/;"	f
nerdtree#version	bundle/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version()$/;"	f
new_parser	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:new_parser(text) abort$/;"	f
newcache	bundle/ctrlp.vim/autoload/ctrlp/mixed.vim	/^fu! s:newcache(cwd)$/;"	f
nocache	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nocache(...)$/;"	f
nocache	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^fu! s:nocache()$/;"	f
nocache	bundle/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^fu! s:nocache()$/;"	f
nonamecond	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nonamecond(str, filpath)$/;"	f
nosort	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosort()$/;"	f
nosplit	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:nosplit()$/;"	f
offset	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:offset(lines, height)$/;"	f
open	bundle/vim-rails/autoload/rails.vim	/^function! s:open(cmd, file) abort$/;"	f
openExplorer	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node)$/;"	f
openHSplit	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target)$/;"	f
openInNewTab	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target)$/;"	f
openInNewTabSilent	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target)$/;"	f
openNodeRecursively	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node)$/;"	f
openVSplit	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target)$/;"	f
openfile	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:openfile(cmd, fid, tail, chkmod, ...)$/;"	f
opfunc	bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
option_map	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:option_map(letter, option, mode) abort$/;"	f
opts	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:opts(...)$/;"	f
parseline	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:parseline(line)$/;"	f
parser_add_var	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_add_var(var) dict abort$/;"	f
parser_advance	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_advance(...) dict abort$/;"	f
parser_create_stubs	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_create_stubs() dict abort$/;"	f
parser_expr	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_expr() dict abort$/;"	f
parser_id	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_id() dict abort$/;"	f
parser_line	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_line() dict abort$/;"	f
parser_parse	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_parse() dict abort$/;"	f
parser_pat	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_pat(...) dict abort$/;"	f
parser_placeholder	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_placeholder() dict abort$/;"	f
parser_same	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_same(tok) dict abort$/;"	f
parser_string	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_string(till, ...) dict abort$/;"	f
parser_subst	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_subst() dict abort$/;"	f
parser_text	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_text(till) dict abort$/;"	f
parser_var	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_var() dict abort$/;"	f
parser_varend	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:parser_varend() dict abort$/;"	f
parts	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:parts(str)$/;"	f
pathjoin	bundle/vim-rails/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
pathogen#cycle_filetype	autoload/pathogen.vim	/^function! pathogen#cycle_filetype() abort$/;"	f
pathogen#execute	autoload/pathogen.vim	/^function! pathogen#execute(...) abort$/;"	f
pathogen#expand	autoload/pathogen.vim	/^function! pathogen#expand(pattern, ...) abort$/;"	f
pathogen#fnameescape	autoload/pathogen.vim	/^function! pathogen#fnameescape(string) abort$/;"	f
pathogen#glob	autoload/pathogen.vim	/^function! pathogen#glob(pattern) abort$/;"	f
pathogen#glob_directories	autoload/pathogen.vim	/^function! pathogen#glob_directories(pattern) abort$/;"	f
pathogen#helptags	autoload/pathogen.vim	/^function! pathogen#helptags() abort$/;"	f
pathogen#infect	autoload/pathogen.vim	/^function! pathogen#infect(...) abort$/;"	f
pathogen#interpose	autoload/pathogen.vim	/^function! pathogen#interpose(name) abort$/;"	f
pathogen#is_absolute	autoload/pathogen.vim	/^function! pathogen#is_absolute(path) abort$/;"	f
pathogen#is_disabled	autoload/pathogen.vim	/^function! pathogen#is_disabled(path) abort$/;"	f
pathogen#join	autoload/pathogen.vim	/^function! pathogen#join(...) abort$/;"	f
pathogen#legacyjoin	autoload/pathogen.vim	/^function! pathogen#legacyjoin(...) abort$/;"	f
pathogen#runtime_findfile	autoload/pathogen.vim	/^function! pathogen#runtime_findfile(file,count) abort$/;"	f
pathogen#separator	autoload/pathogen.vim	/^function! pathogen#separator() abort$/;"	f
pathogen#slash	autoload/pathogen.vim	/^function! pathogen#slash() abort$/;"	f
pathogen#split	autoload/pathogen.vim	/^function! pathogen#split(path) abort$/;"	f
pathogen#surround	autoload/pathogen.vim	/^function! pathogen#surround(path) abort$/;"	f
pathogen#uniq	autoload/pathogen.vim	/^function! pathogen#uniq(list) abort$/;"	f
pathshorten	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:pathshorten(str)$/;"	f
pathsplit	bundle/vim-rails/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pop_command	bundle/vim-rails/autoload/rails.vim	/^function! s:pop_command()$/;"	f
previewNodeCurrent	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node)$/;"	f
previewNodeHSplit	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node)$/;"	f
previewNodeVSplit	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node)$/;"	f
process	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:process(entries, type)$/;"	f
process	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:process(fname, ftype)$/;"	f
process	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:process(clines, ...)$/;"	f
process	bundle/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
projection_pairs	bundle/vim-rails/autoload/rails.vim	/^function! s:projection_pairs(options)$/;"	f
promptToDelBuffer	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToRenameBuffer	bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToRenameBuffer(bufnum, msg, newFileName)$/;"	f
prototype.AssessName	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.AssessName(world, name) dict "{{{3$/;"	f
prototype.BuildTableList	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.BuildTableList() dict abort "{{{3$/;"	f
prototype.CleanFilter	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^function! s:prototype.CleanFilter(filter) dict "{{{3$/;"	f
prototype.CleanFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.CleanFilter(filter) dict abort "{{{3$/;"	f
prototype.ClearAllMarks	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.ClearAllMarks() dict abort "{{{3$/;"	f
prototype.CloseScratch	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.CloseScratch(...) dict abort "{{{3$/;"	f
prototype.CurrentItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.CurrentItem() dict abort "{{{3$/;"	f
prototype.DisplayFilter	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.DisplayFilter(filter) dict "{{{3$/;"	f
prototype.DisplayFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.DisplayFilter() dict abort "{{{3$/;"	f
prototype.DisplayFormat	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.DisplayFormat(list) dict abort "{{{3$/;"	f
prototype.DisplayHelp	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.DisplayHelp() dict abort "{{{3$/;"	f
prototype.DisplayList	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.DisplayList(...) dict abort "{{{3$/;"	f
prototype.DisplayListMark	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.DisplayListMark(x, y, mark) dict abort "{{{3$/;"	f
prototype.Dummy	bundle/tlib_vim/autoload/tlib/Test.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Dummy	bundle/tlib_vim/autoload/tlib/TestChild.vim	/^function! s:prototype.Dummy() dict "{{{3$/;"	f
prototype.Extend	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.Extend(dictionary) dict "{{{3$/;"	f
prototype.FilterIsEmpty	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FilterIsEmpty() dict abort "{{{3$/;"	f
prototype.FilterRxPrefix	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.FilterRxPrefix() dict "{{{3$/;"	f
prototype.FilterRxPrefix	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FilterRxPrefix() dict abort "{{{3$/;"	f
prototype.FollowCursor	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FollowCursor() dict abort "{{{3$/;"	f
prototype.FormatArgs	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FormatArgs(format_string, arg) dict abort "{{{3$/;"	f
prototype.FormatBaseFromData	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FormatBaseFromData() abort dict "{{{3$/;"	f
prototype.FormatFilename	bundle/tlib_vim/autoload/tlib/World.vim	/^    function! s:prototype.FormatFilename(file) dict abort "{{{3$/;"	f
prototype.FormatName	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.FormatName(cache, format, value) dict abort "{{{3$/;"	f
prototype.GetBaseIdx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx(idx) dict abort "{{{3$/;"	f
prototype.GetBaseIdx0	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetBaseIdx0(idx) dict abort "{{{3$/;"	f
prototype.GetBaseItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetBaseItem(idx) dict abort "{{{3$/;"	f
prototype.GetItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetItem(idx) dict abort "{{{3$/;"	f
prototype.GetLineIdx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetLineIdx(lnum) dict abort "{{{3$/;"	f
prototype.GetListIdx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetListIdx(baseidx) dict abort "{{{3$/;"	f
prototype.GetResize	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetResize(size) dict abort "{{{3$/;"	f
prototype.GetRx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetRx(filter) dict abort "{{{3$/;"	f
prototype.GetRx0	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetRx0(...) dict abort "{{{3$/;"	f
prototype.GetSelectedItems	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.GetSelectedItems(current) dict abort "{{{3$/;"	f
prototype.Help	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Help	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Help	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Help	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^function! s:prototype.Help(world) dict "{{{3$/;"	f
prototype.Highlight_filename	bundle/tlib_vim/autoload/tlib/World.vim	/^    function! s:prototype.Highlight_filename() dict abort "{{{3$/;"	f
prototype.Inherit	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.Inherit(object) dict "{{{3$/;"	f
prototype.Init	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.Init	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.Init	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.Init(world) dict "{{{3$/;"	f
prototype.InitFormatName	bundle/tlib_vim/autoload/tlib/World.vim	/^    function! s:prototype.InitFormatName() dict abort "{{{3 $/;"	f
prototype.InitHelp	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.InitHelp() dict abort "{{{3$/;"	f
prototype.Initialize	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Initialize() dict abort "{{{3$/;"	f
prototype.IsA	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.IsA(class) dict "{{{3$/;"	f
prototype.IsRelated	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.IsRelated(object) dict "{{{3$/;"	f
prototype.IsValidFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.IsValidFilter() dict abort "{{{3$/;"	f
prototype.Leave	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Leave() dict abort "{{{3$/;"	f
prototype.MarkCurrent	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.MarkCurrent(y) dict abort "{{{3$/;"	f
prototype.Match	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Match(world, text) dict "{{{3$/;"	f
prototype.MatchBaseIdx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.MatchBaseIdx(idx) dict abort "{{{3$/;"	f
prototype.New	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.New(...) dict "{{{3$/;"	f
prototype.PopFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.PopFilter() dict abort "{{{3$/;"	f
prototype.Pretty	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.Pretty(filter) dict "{{{3$/;"	f
prototype.PrintLines	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.PrintLines() dict abort "{{{3$/;"	f
prototype.PushFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^function! s:prototype.PushFrontFilter(world, char) dict "{{{3$/;"	f
prototype.PushFrontFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.PushFrontFilter(char) dict abort "{{{3$/;"	f
prototype.PushHelp	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.PushHelp(...) dict abort "{{{3$/;"	f
prototype.Query	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Query() dict abort "{{{3$/;"	f
prototype.ReduceFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.ReduceFilter() dict abort "{{{3$/;"	f
prototype.ReduceFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.ReduceFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.ReduceFrontFilter(world) dict "{{{3$/;"	f
prototype.Reset	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Reset(...) dict abort "{{{3$/;"	f
prototype.ResetSelected	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.ResetSelected() dict abort "{{{3$/;"	f
prototype.Resize	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Resize(hsize, vsize) dict abort "{{{3$/;"	f
prototype.RespondTo	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.RespondTo(name) dict "{{{3$/;"	f
prototype.RestoreOrigin	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.RestoreOrigin(...) dict abort "{{{3$/;"	f
prototype.RestoreWindow	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.RestoreWindow(...) dict abort "{{{3$/;"	f
prototype.Retrieve	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Retrieve(anyway) dict abort "{{{3$/;"	f
prototype.ScrollToOffset	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.ScrollToOffset() dict abort "{{{3$/;"	f
prototype.SelectItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SelectItem(mode, index) dict abort "{{{3$/;"	f
prototype.SelectItemsByNames	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SelectItemsByNames(mode, items) dict abort "{{{3$/;"	f
prototype.SetBaseItem	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetBaseItem(idx, item) dict abort "{{{3$/;"	f
prototype.SetFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetFilter() dict abort "{{{3$/;"	f
prototype.SetFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^function! s:prototype.SetFrontFilter(world, pattern) dict "{{{3$/;"	f
prototype.SetFrontFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetFrontFilter(pattern) dict abort "{{{3$/;"	f
prototype.SetInitialFilter	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetInitialFilter(filter) dict abort "{{{3$/;"	f
prototype.SetMatchMode	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetMatchMode(match_mode) dict abort "{{{3$/;"	f
prototype.SetOffset	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetOffset() dict abort "{{{3$/;"	f
prototype.SetOrigin	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetOrigin(...) dict abort "{{{3$/;"	f
prototype.SetPrefIdx	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetPrefIdx() dict abort "{{{3$/;"	f
prototype.SetStatusline	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SetStatusline(query) dict abort "{{{3$/;"	f
prototype.Set_display_format	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Set_display_format(value) dict abort "{{{3$/;"	f
prototype.Set_highlight_filename	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Set_highlight_filename() dict abort "{{{3$/;"	f
prototype.Super	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! s:prototype.Super(method, arglist) dict "{{{3$/;"	f
prototype.Suspend	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.Suspend() dict abort "{{{3$/;"	f
prototype.SwitchWindow	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.SwitchWindow(where) dict abort "{{{3$/;"	f
prototype.UseFilenameIndicators	bundle/tlib_vim/autoload/tlib/World.vim	/^    function! s:prototype.UseFilenameIndicators() dict abort "{{{3$/;"	f
prototype.UseInputListScratch	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.UseInputListScratch() dict abort "{{{3$/;"	f
prototype.UseScratch	bundle/tlib_vim/autoload/tlib/World.vim	/^function! s:prototype.UseScratch() dict abort "{{{3$/;"	f
push_chdir	bundle/vim-rails/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
putline	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:putline(how, map) abort$/;"	f
qf_pre	bundle/vim-rails/autoload/rails.vim	/^function! s:qf_pre() abort$/;"	f
r_error	bundle/vim-rails/autoload/rails.vim	/^function! s:r_error(cmd, impl) abort$/;"	f
rails#app	bundle/vim-rails/autoload/rails.vim	/^function! rails#app(...) abort$/;"	f
rails#asset_cfile	bundle/vim-rails/autoload/rails.vim	/^function! rails#asset_cfile(...) abort$/;"	f
rails#buffer	bundle/vim-rails/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#buffer_setup	bundle/vim-rails/autoload/rails.vim	/^function! rails#buffer_setup() abort$/;"	f
rails#buffer_syntax	bundle/vim-rails/autoload/rails.vim	/^function! rails#buffer_syntax() abort$/;"	f
rails#cache_clear	bundle/vim-rails/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	bundle/vim-rails/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#cfile	bundle/vim-rails/autoload/rails.vim	/^function! rails#cfile(...) abort$/;"	f
rails#command	bundle/vim-rails/autoload/rails.vim	/^function! rails#command(bang, mods, count, arg) abort$/;"	f
rails#complete_rails	bundle/vim-rails/autoload/rails.vim	/^function! rails#complete_rails(ArgLead, CmdLine, P, ...) abort$/;"	f
rails#complete_rake	bundle/vim-rails/autoload/rails.vim	/^function! rails#complete_rake(A,L,P)$/;"	f
rails#embedded_cfile	bundle/vim-rails/autoload/rails.vim	/^function! rails#embedded_cfile(...) abort$/;"	f
rails#get_binding_for	bundle/vim-rails/autoload/rails.vim	/^function! rails#get_binding_for(pid) abort$/;"	f
rails#includeexpr	bundle/vim-rails/autoload/rails.vim	/^function! rails#includeexpr(fname) abort$/;"	f
rails#json_parse	bundle/vim-rails/autoload/rails.vim	/^function! rails#json_parse(string) abort$/;"	f
rails#lencmp	bundle/vim-rails/autoload/rails.vim	/^function! rails#lencmp(i1, i2) abort$/;"	f
rails#log_setup	bundle/vim-rails/autoload/rails.vim	/^function! rails#log_setup() abort$/;"	f
rails#log_syntax	bundle/vim-rails/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#pluralize	bundle/vim-rails/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#revision	bundle/vim-rails/autoload/rails.vim	/^function! rails#revision() abort$/;"	f
rails#ruby_syntax	bundle/vim-rails/autoload/rails.vim	/^function! rails#ruby_syntax() abort$/;"	f
rails#singularize	bundle/vim-rails/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#underscore	bundle/vim-rails/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
rails#yaml_parse_file	bundle/vim-rails/autoload/rails.vim	/^function! rails#yaml_parse_file(file) abort$/;"	f
railsPluginAbolish	bundle/vim-rails/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	bundle/vim-rails/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	bundle/vim-rails/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMake	bundle/vim-rails/autoload/rails.vim	/^augroup railsPluginMake$/;"	a
rake2rails	bundle/vim-rails/autoload/rails.vim	/^function! s:rake2rails(task) abort$/;"	f
readable_absolute	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_absolute() dict abort$/;"	f
readable_alternate	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_alternate(...) dict abort$/;"	f
readable_alternate_candidates	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_alternate_candidates(...) dict abort$/;"	f
readable_app	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_default_rake_task(...) dict abort$/;"	f
readable_default_task	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_default_task(...) dict abort$/;"	f
readable_define_pattern	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_find_affinity	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_find_affinity() dict abort$/;"	f
readable_format	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_format(start) dict abort$/;"	f
readable_last_method	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_open_command	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_open_command(cmd, argument, name, projections) dict abort$/;"	f
readable_preview_urls	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_projected	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_projected(key, ...) dict abort$/;"	f
readable_projected_with_raw	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_projected_with_raw(key, ...) dict abort$/;"	f
readable_related	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_relative	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_relative() dict abort$/;"	f
readable_resolve_layout	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_layout(name, ...) dict abort$/;"	f
readable_resolve_view	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_view(name, ...) dict abort$/;"	f
readable_runner_command	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_runner_command(bang, count, arg) dict abort$/;"	f
readable_spec	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_spec() dict abort$/;"	f
readable_test_file	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_test_file() dict abort$/;"	f
readable_test_file_candidates	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_test_file_candidates() dict abort$/;"	f
readable_type_name	bundle/vim-rails/autoload/rails.vim	/^function! s:readable_type_name(...) dict abort$/;"	f
readfile	bundle/vim-rails/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
record	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:record(bufnr)$/;"	f
redraw	bundle/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
reformat	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:reformat(mrufs, ...)$/;"	f
refreshCurrent	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node)$/;"	f
refreshRoot	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot()$/;"	f
regexfilter	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regexfilter(str)$/;"	f
regisfilter	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:regisfilter(reg)$/;"	f
reindent	bundle/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relglob	bundle/vim-rails/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
reload_log	bundle/vim-rails/autoload/rails.vim	/^function! s:reload_log() abort$/;"	f
remarksigns	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:remarksigns()$/;"	f
resetomnicomplete	bundle/vim-rails/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
reuseWin	bundle/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
rquote	bundle/vim-rails/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
ruby_cfile	bundle/vim-rails/autoload/rails.vim	/^function! s:ruby_cfile() abort$/;"	f
s	bundle/tlib_vim/spec/tlib/rx.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s	bundle/tlib_vim/test/tlib.vim	/^    let s = printf('%sfoo%sbar%s', c, c, c)$/;"	v
s:Bookmark	bundle/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Creator	bundle/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Event	bundle/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:FlagSet	bundle/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:Help	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^let s:Help = s:prototype.Help$/;"	v
s:Help	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^let s:Help = s:prototype.Help$/;"	v
s:Help	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^let s:Help = s:prototype.Help$/;"	v
s:KeyMap	bundle/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:MenuController	bundle/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	bundle/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTree	bundle/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTreeSortStarIndex	bundle/nerdtree/lib/nerdtree/path.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:Notifier	bundle/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Opener	bundle/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Path	bundle/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:SourcedFile	bundle/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:TreeDirNode	bundle/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeFileNode	bundle/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:UI	bundle/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:app_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	bundle/vim-rails/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:ars	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:ars = ['s:maxdepth', 's:maxfiles', 's:compare_lim', 's:glob', 's:caching']$/;"	v
s:bar	bundle/tlib_vim/spec/tlib/var.vim	/^let s:bar = 4$/;"	v
s:bar	bundle/tlib_vim/test/tlib.vim	/^let s:bar = 4$/;"	v
s:base	bundle/tlib_vim/autoload/tlib/signs.vim	/^let s:base = 2327$/;"	v
s:bins	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:bins = [$/;"	v
s:bmru	bundle/tlib_vim/autoload/tlib/buffer.vim	/^let s:bmru = []$/;"	v
s:buffer_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:c	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['cache_dir'] = get(s:c, 'cache_dir', expand('$HOME').'\/.vim-cache')$/;"	v
s:c	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:c['scanned_files'] = get(s:c, 'scanned_files', {})$/;"	v
s:c	bundle/vim-addon-mw-utils/autoload/glob.vim	/^let s:c['glob_cache'] = get(s:c, 'glob_cache', {})$/;"	v
s:c	bundle/vim-addon-mw-utils/autoload/glob.vim	/^let s:c['regex_ignore_directory'] = '\\<\\%([_.]darcs\\|\\.git\\|.svn\\|.hg\\|.cvs\\|.bzr\\)\\>'$/;"	v
s:cache	bundle/tlib_vim/autoload/tlib/cache.vim	/^let s:cache = {}$/;"	v
s:cache	bundle/vim-snipmate/autoload/snipMate.vim	/^let s:cache = {}$/;"	v
s:cache_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:ccex	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:ccex = s:pref.'clear_cache_on_exit'$/;"	v
s:cmd1	bundle/tlib_vim/autoload/tlib/vcs.vim	/^            let s:cmd1 = printf(g:tlib#vcs#check, s:cmd)$/;"	v
s:compare_lim	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:compare_lim = 3000$/;"	v
s:cygwin	bundle/tlib_vim/autoload/tlib/sys.vim	/^let s:cygwin = {}$/;"	v
s:default_comment_string	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:default_comment_string = s:DefaultValue('commentstring')$/;"	v
s:default_comments	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:default_comments       = s:DefaultValue('comments')$/;"	v
s:default_projections	bundle/vim-rails/autoload/rails.vim	/^let s:default_projections = {$/;"	v
s:define_cache_file	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:define_cache_file = "let this_dir = s:c['cache_dir'].'\/cached-file-contents' | let cache_file = expand(this_dir.'\/'.substitute(string([func_as_string, a:file]),'[[\\\\]{}:\/\\\\,''\\"# ]\\\\+','_','g'))"$/;"	v
s:definitions	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:definitions = {}$/;"	v
s:did_snip_helper	bundle/vim-snipmate/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:dirArrows	bundle/nerdtree/syntax/nerdtree.vim	/^let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:dir_stack	bundle/tlib_vim/autoload/tlib/dir.vim	/^let s:dir_stack = []$/;"	v
s:dircounts	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:dircounts = {}$/;"	v
s:done_bundles	autoload/pathogen.vim	/^let s:done_bundles = {}$/;"	v
s:efm_generate	bundle/vim-rails/autoload/rails.vim	/^let s:efm_generate =$/;"	v
s:executables	bundle/tlib_vim/autoload/tlib/sys.vim	/^let s:executables = {}$/;"	v
s:ficounts	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:ficounts = {}$/;"	v
s:file	bundle/vim-rails/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:filecounts	bundle/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:filecounts = {}$/;"	v
s:filereadable	bundle/tlib_vim/autoload/tlib/file.vim	/^let s:filereadable = {}$/;"	v
s:first_completion	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:first_completion = 0$/;"	v
s:format	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:format = []$/;"	v
s:fpats	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:fpats = {$/;"	v
s:fullscreen	bundle/tlib_vim/autoload/tlib/vim.vim	/^let s:fullscreen = 0$/;"	v
s:glbs	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:glbs = { 'magic': 1, 'to': 1, 'tm': 0, 'sb': 1, 'hls': 0, 'im': 0,$/;"	v
s:glob_cache	bundle/vim-addon-mw-utils/autoload/glob.vim	/^let s:glob_cache = s:c['glob_cache']$/;"	v
s:has_projections	bundle/vim-rails/autoload/rails.vim	/^let s:has_projections = {$/;"	v
s:hlgrps	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:hlgrps = {$/;"	v
s:hooks	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:hooks = { 'after_startup': [], 'buffer_enter': [], 'buffer_leave': [], 'after_keymap': [] }$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/dir.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/mixed.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/rtscript.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:id = 0$/;"	v
s:id_counter	bundle/tlib_vim/autoload/tlib/Object.vim	/^let s:id_counter = 0$/;"	v
s:ids	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:ids = []$/;"	v
s:initialized	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:initialized = 0$/;"	v
s:kprange	bundle/ctrlp.vim/autoload/ctrlp.vim	/^let s:kprange = {$/;"	v
s:laststatus	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:laststatus = []$/;"	v
s:max	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:max = []$/;"	v
s:native_filenames	bundle/tlib_vim/autoload/tlib/sys.vim	/^let s:native_filenames = {}$/;"	v
s:null_comment_string	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:null_comment_string    = '%s'$/;"	v
s:old_cpo	bundle/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:overwrite	bundle/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = 0$/;"	v
s:overwrite	bundle/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = maparg('<S-Tab>', 'i') ==? '<Plug>SuperTabBackward'$/;"	v
s:overwrite	bundle/vim-snipmate/after/plugin/snipMate.vim	/^		let s:overwrite = maparg('<Tab>', 'i') ==? '<Plug>SuperTabForward'$/;"	v
s:parser_proto	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^let s:parser_proto = {}$/;"	v
s:projections_for_gems	bundle/vim-rails/autoload/rails.vim	/^let s:projections_for_gems = {}$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^let s:prototype = tlib#Object#New({'_class': ['Filter_cnf'], 'name': 'cnf'}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_cnfd'], 'name': 'cnfd'}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_fuzzy'], 'name': 'fuzzy'}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^let s:prototype = tlib#Filter_cnf#New({'_class': ['Filter_glob'], 'name': 'glob'}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^let s:prototype.highlight = g:tlib#input#higroup$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Object.vim	/^let s:prototype  = {'_class': ['object'], '_super': [], '_id': 0} "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/Test.vim	/^let s:prototype = tlib#Object#New({'_class': ['Test']}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/TestChild.vim	/^let s:prototype = tlib#Test#New({'_class': ['TestChild']}) "{{{2$/;"	v
s:prototype	bundle/tlib_vim/autoload/tlib/World.vim	/^let s:prototype = tlib#Object#New({$/;"	v
s:readable_prototype	bundle/vim-rails/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:register	bundle/tlib_vim/autoload/tlib/signs.vim	/^let s:register = {}$/;"	v
s:restoreframecmd	bundle/tlib_vim/autoload/tlib/vim.vim	/^let s:restoreframecmd = ''$/;"	v
s:save_cpo	bundle/tcomment_vim/plugin/tcomment.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/map.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/normal.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/notify.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/paragraph.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/signs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/autoload/tlib/textobjects.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/macros/tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/plugin/02tlib.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/arg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/eval.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/input.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/rx.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/string.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/url.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/tlib_vim/spec/tlib/var.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-snipmate/after/plugin/snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	bundle/vim-snipmate/plugin/snipMate.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_updatetime	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:save_updatetime = &updatetime$/;"	v
s:saved_terminals	bundle/Conque-Shell/autoload/conque_term.vim	/^        let s:saved_terminals = {}$/;"	v
s:scanned_files	bundle/vim-addon-mw-utils/autoload/cached_file_contents.vim	/^let s:scanned_files = s:c['scanned_files']$/;"	v
s:schemas	bundle/tlib_vim/autoload/tlib/type.vim	/^let s:schemas = {}$/;"	v
s:scriptdir	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:scriptdir = expand("<sfile>:h") . '\/'$/;"	v
s:scriptdirpy	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:scriptdirpy = expand("<sfile>:h") . '\/conque_term\/'$/;"	v
s:scriptfile	bundle/tlib_vim/spec/tlib/hash.vim	/^    let s:scriptfile = matchstr(s:script, '^\\s*\\d\\+:\\s\\+\\zs.*$')$/;"	v
s:scriptlines	bundle/tlib_vim/spec/tlib/hash.vim	/^        let s:scriptlines = readfile(s:scriptfile)$/;"	v
s:sid	bundle/vim-rails/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:sigil	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^let s:sigil = nr2char(31)$/;"	v
s:special_chars	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^let s:special_chars = "$`\\n"$/;"	v
s:state	bundle/tlib_vim/samples/tlib/input/tlib_input_list.vim	/^let s:state = {$/;"	v
s:state_proto	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^let s:state_proto = {}$/;"	v
s:statusline	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:statusline = []$/;"	v
s:term_obj	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:term_obj = {'idx': 1, 'var': '', 'is_buffer': 1, 'active': 1, 'buffer_name': '', 'command': ''}$/;"	v
s:text	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^let s:text = map(['second', 'seconds', 'minutes', 'hours', 'days', 'weeks',$/;"	v
s:timestamp	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:timestamp = -1$/;"	v
s:timestamps	bundle/tlib_vim/autoload/tlib/cache.vim	/^let s:timestamps = {}$/;"	v
s:transformations	bundle/vim-rails/autoload/rails.vim	/^let s:transformations = {}$/;"	v
s:tree_up_dir_line	bundle/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:types	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^let s:types = {$/;"	v
s:types_dirty	bundle/tcomment_vim/autoload/tcomment.vim	/^let s:types_dirty = 1$/;"	v
s:value	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:value = []$/;"	v
s:vcs_cache	bundle/tlib_vim/autoload/tlib/vcs.vim	/^let s:vcs_cache = {}$/;"	v
s:view_types	bundle/vim-rails/autoload/rails.vim	/^let s:view_types = split('rhtml,erb,rxml,builder,rjs,haml',',')$/;"	v
s:width	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^let s:width = []$/;"	v
s:wig_cond	bundle/ctrlp.vim/autoload/ctrlp/utils.vim	/^let s:wig_cond = v:version > 702 || ( v:version == 702 && has('patch051') )$/;"	v
s:win_id	bundle/tlib_vim/autoload/tlib/win.vim	/^    let s:win_id = 0$/;"	v
s:windows_vk	bundle/Conque-Shell/autoload/conque_term.vim	/^let s:windows_vk = {$/;"	v
samerootsyml	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:samerootsyml(each, isfile, cwd)$/;"	f
sanstail	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sanstail(str)$/;"	f
savebookmark	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:savebookmark(name, cwd)$/;"	f
savetofile	bundle/ctrlp.vim/autoload/ctrlp/mrufiles.vim	/^fu! s:savetofile(mrufs)$/;"	f
scanlineforuris	bundle/vim-rails/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
schemaEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:schemaEdit(cmd,...)$/;"	f
schemaList	bundle/vim-rails/autoload/rails.vim	/^function! s:schemaList(A,L,P)$/;"	f
selectiveexpand	bundle/vim-rails/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
semi	bundle/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
set_path_options	bundle/vim-rails/autoload/rails.vim	/^function! s:set_path_options() abort$/;"	f
setentries	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:setentries()$/;"	f
settype	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:settype(type)$/;"	f
setup_paste	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:setup_paste() abort$/;"	f
setupblank	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:setupblank()$/;"	f
sfile	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:sfile() abort$/;"	f
sfile	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:sfile() abort$/;"	f
shortest	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:shortest(lens)$/;"	f
showMenu	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node)$/;"	f
snipMate#BackwardsSnippet	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#BackwardsSnippet() abort$/;"	f
snipMate#CanBeTriggered	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#CanBeTriggered() abort$/;"	f
snipMate#DefaultPool	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#DefaultPool(scopes, trigger, result) abort$/;"	f
snipMate#GetSnippets	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippets(scopes, trigger) abort$/;"	f
snipMate#GetSnippetsForWordBelowCursor	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippetsForWordBelowCursor(word, exact) abort$/;"	f
snipMate#GetSnippetsForWordBelowCursorForComplete	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#GetSnippetsForWordBelowCursorForComplete(word) abort$/;"	f
snipMate#OpenSnippetFiles	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#OpenSnippetFiles() abort$/;"	f
snipMate#ReadSnippetsFile	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ReadSnippetsFile(file) abort$/;"	f
snipMate#ScopesByFile	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ScopesByFile() abort$/;"	f
snipMate#SetByPath	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#SetByPath(dict, trigger, path, snippet, bang, snipversion) abort$/;"	f
snipMate#ShowAvailableSnips	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#ShowAvailableSnips() abort$/;"	f
snipMate#TriggerSnippet	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#TriggerSnippet(...) abort$/;"	f
snipMate#WordBelowCursor	bundle/vim-snipmate/autoload/snipMate.vim	/^fun! snipMate#WordBelowCursor() abort$/;"	f
snipMate#expandSnip	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#expandSnip(snip, version, col) abort$/;"	f
snipMate#placeholder_str	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#placeholder_str(num, stops) abort$/;"	f
snipMate#sniplist_str	bundle/vim-snipmate/autoload/snipMate.vim	/^function! snipMate#sniplist_str(snippet, stops) abort$/;"	f
snipMate_python_demo#Activate	bundle/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! snipMate_python_demo#Activate() abort$/;"	f
snipMate_python_demo#FunctionsFromCurrentFileAndTags	bundle/vim-snipmate/autoload/snipMate_python_demo.vim	/^fun! snipMate_python_demo#FunctionsFromCurrentFileAndTags(scopes, trigger, result) abort$/;"	f
snipmate#jumping#state	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! snipmate#jumping#state() abort$/;"	f
snipmate#legacy#build_stops	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^function! snipmate#legacy#build_stops(snip, lnum, col, indent) abort$/;"	f
snipmate#legacy#process_snippet	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^function! snipmate#legacy#process_snippet(snip) abort$/;"	f
snipmate#legacy#sigil	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^let snipmate#legacy#sigil = s:sigil$/;"	v
snipmate#parse#snippet	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! snipmate#parse#snippet(text, ...) abort$/;"	f
snipmate#util#add_methods	bundle/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#add_methods(sfile, namespace, methods) abort$/;"	f
snipmate#util#eval	bundle/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#eval(arg)$/;"	f
snipmate#util#tabwidth	bundle/vim-snipmate/autoload/snipmate/util.vim	/^function! snipmate#util#tabwidth()$/;"	f
snipmate_changes	bundle/vim-snipmate/t/jumping.vim	/^            aug snipmate_changes$/;"	a
snippet_dirs	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:snippet_dirs() abort$/;"	f
snippet_filenames	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:snippet_filenames(scope, trigger) abort$/;"	f
source_snippet	bundle/vim-snipmate/autoload/snipMate.vim	/^function! s:source_snippet() abort$/;"	f
space_before_function_paren	bundle/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
specEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:specEdit(cmd,...) abort$/;"	f
specList	bundle/vim-rails/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
split	bundle/vim-rails/autoload/rails.vim	/^function! s:split(arg, ...)$/;"	f
startswith	bundle/vim-rails/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
state_find_next_stop	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_find_next_stop(backwards) dict abort$/;"	f
state_find_update_objects	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_find_update_objects(item) dict abort$/;"	f
state_jump_stop	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_jump_stop(backwards) dict abort$/;"	f
state_remove	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_remove() dict abort$/;"	f
state_remove_nested	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_remove_nested(...) dict abort$/;"	f
state_select_word	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_select_word() dict abort$/;"	f
state_set_stop	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_set_stop(backwards) dict abort$/;"	f
state_update	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update(item, change_len, mirror_change) dict abort$/;"	f
state_update_changes	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update_changes() dict abort$/;"	f
state_update_mirrors	bundle/vim-snipmate/autoload/snipmate/jumping.vim	/^function! s:state_update_mirrors(change) dict abort$/;"	f
statusbump	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:statusbump() abort$/;"	f
stop	bundle/vim-snipmate/t/jumping.vim	/^            let stop = [2, 'abc']$/;"	v
stop	bundle/vim-snipmate/t/jumping.vim	/^            let stop = b:snip_state.stops[1]$/;"	v
string_decode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_decode(str)$/;"	f
string_encode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_encode(str)$/;"	f
strwidth	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:strwidth(str)$/;"	f
stylesheetEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...) abort$/;"	f
stylesheetList	bundle/vim-rails/autoload/rails.vim	/^function! s:stylesheetList(A, L, P) abort$/;"	f
sub	bundle/vim-rails/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sublist	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist(l, s, e)$/;"	f
sublist7071	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:sublist7071(l, s, e)$/;"	f
substitute_visual	bundle/vim-snipmate/autoload/snipmate/legacy.vim	/^function! s:substitute_visual(snippet, visual) abort$/;"	f
suffixes	bundle/vim-rails/autoload/rails.vim	/^function! s:suffixes(type) abort$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/changes.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/line.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/quickfix.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/tag.vim	/^fu! s:syntax()$/;"	f
syntax	bundle/ctrlp.vim/autoload/ctrlp/undo.vim	/^fu! s:syntax()$/;"	f
tail	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:tail()$/;"	f
tcomment#CollectFileTypes	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#CollectFileTypes() abort$/;"	f
tcomment#Comment	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#Comment(beg, end, ...) abort$/;"	f
tcomment#CommentAs	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#CommentAs(beg, end, comment_anyway, filetype, ...) abort$/;"	f
tcomment#Complete	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#Complete(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#CompleteArgs	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#CompleteArgs(ArgLead, CmdLine, CursorPos) abort "{{{3$/;"	f
tcomment#DefineType	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#DefineType(name, commentdef, ...) abort$/;"	f
tcomment#GetCommentDef	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#GetCommentDef(name, ...) abort$/;"	f
tcomment#GetLineC	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#GetLineC(...) abort$/;"	f
tcomment#GuessCommentType	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#GuessCommentType(...) abort "{{{3$/;"	f
tcomment#MaybeReuseOptions	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#MaybeReuseOptions(name) abort "{{{3$/;"	f
tcomment#Operator	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#Operator(type, ...) abort "{{{3$/;"	f
tcomment#OperatorAnyway	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#OperatorAnyway(type) abort "{{{3$/;"	f
tcomment#OperatorLine	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#OperatorLine(type) abort "{{{3$/;"	f
tcomment#OperatorLineAnyway	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#OperatorLineAnyway(type) abort "{{{3$/;"	f
tcomment#ResetOption	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#ResetOption() abort "{{{3$/;"	f
tcomment#SetOption	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#SetOption(name, arg) abort "{{{3$/;"	f
tcomment#TextObjectInlineComment	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#TextObjectInlineComment() abort "{{{3$/;"	f
tcomment#TypeExists	bundle/tcomment_vim/autoload/tcomment.vim	/^function! tcomment#TypeExists(name, ...) abort$/;"	f
term_obj.close	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.close() dict " {{{$/;"	f
term_obj.focus	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.focus() dict " {{{$/;"	f
term_obj.read	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.read(...) dict " {{{$/;"	f
term_obj.set_callback	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.set_callback(callback_func) dict " {{{$/;"	f
term_obj.write	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.write(...) dict " {{{$/;"	f
term_obj.writeln	bundle/Conque-Shell/autoload/conque_term.vim	/^function! s:term_obj.writeln(...) dict " {{{$/;"	f
test	bundle/tlib_vim/test/tlib.vim	/^let test = tlib#Test#New()$/;"	v
test1	bundle/tlib_vim/test/tlib.vim	/^let test1 = tlib#Test#New()$/;"	v
testc	bundle/tlib_vim/test/tlib.vim	/^let testc = tlib#TestChild#New()$/;"	v
testworld	bundle/tlib_vim/test/tlib.vim	/^let testworld = tlib#World#New()$/;"	v
text	bundle/vim-snipmate/t/parser.vim	/^        let text = 'a `fnamemodify("x.y", ":r")` ${2:(${3\/a\/b})}'$/;"	v
textdialog	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:textdialog(str)$/;"	f
tiny_cmd#Get	bundle/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Get(nr)$/;"	f
tiny_cmd#Pop	bundle/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Pop(nr)$/;"	f
tiny_cmd#Put	bundle/vim-addon-mw-utils/autoload/tiny_cmd.vim	/^fun! tiny_cmd#Put(a)$/;"	f
tlib#Filter_cnf#New	bundle/tlib_vim/autoload/tlib/Filter_cnf.vim	/^function! tlib#Filter_cnf#New(...) "{{{3$/;"	f
tlib#Filter_cnfd#New	bundle/tlib_vim/autoload/tlib/Filter_cnfd.vim	/^function! tlib#Filter_cnfd#New(...) "{{{3$/;"	f
tlib#Filter_fuzzy#New	bundle/tlib_vim/autoload/tlib/Filter_fuzzy.vim	/^function! tlib#Filter_fuzzy#New(...) "{{{3$/;"	f
tlib#Filter_glob#New	bundle/tlib_vim/autoload/tlib/Filter_glob.vim	/^function! tlib#Filter_glob#New(...) "{{{3$/;"	f
tlib#Object#Methods	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! tlib#Object#Methods(object, ...) "{{{3$/;"	f
tlib#Object#New	bundle/tlib_vim/autoload/tlib/Object.vim	/^function! tlib#Object#New(...) "{{{3$/;"	f
tlib#Test#New	bundle/tlib_vim/autoload/tlib/Test.vim	/^function! tlib#Test#New(...) "{{{3$/;"	f
tlib#TestChild#New	bundle/tlib_vim/autoload/tlib/TestChild.vim	/^function! tlib#TestChild#New(...) "{{{3$/;"	f
tlib#World#New	bundle/tlib_vim/autoload/tlib/World.vim	/^function! tlib#World#New(...) abort$/;"	f
tlib#agent#AND	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#AND(world, selected) "{{{3$/;"	f
tlib#agent#Complete	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Complete(world, selected) abort "{{{3$/;"	f
tlib#agent#CompleteAgentNames	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#CompleteAgentNames(ArgLead, CmdLine, CursorPos)$/;"	f
tlib#agent#Copy	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Copy(world, selected) "{{{3$/;"	f
tlib#agent#CopyItems	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#CopyItems(world, selected) "{{{3$/;"	f
tlib#agent#Cut	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Cut(world, selected) "{{{3$/;"	f
tlib#agent#Debug	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Debug(world, selected) "{{{3$/;"	f
tlib#agent#DeleteItems	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#DeleteItems(world, selected) "{{{3$/;"	f
tlib#agent#DoAtLine	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#DoAtLine(world, selected) "{{{3$/;"	f
tlib#agent#Down	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Down(world, selected, ...) "{{{3$/;"	f
tlib#agent#DownN	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#DownN(world, selected) "{{{3$/;"	f
tlib#agent#EditFile	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditFile(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInSplit	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInTab	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInTab(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInVSplit	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInVSplit(world, selected) "{{{3$/;"	f
tlib#agent#EditFileInWindow	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditFileInWindow(world, selected) "{{{3$/;"	f
tlib#agent#EditItem	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditItem(world, selected) "{{{3$/;"	f
tlib#agent#EditReturnValue	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#EditReturnValue(world, rv) "{{{3$/;"	f
tlib#agent#End	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#End(world, selected) "{{{3$/;"	f
tlib#agent#ExecAgentByName	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ExecAgentByName(world, selected) "{{{3$/;"	f
tlib#agent#Exit	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Exit(world, selected) "{{{3$/;"	f
tlib#agent#GotoLine	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#GotoLine(world, selected) "{{{3$/;"	f
tlib#agent#Help	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Help(world, selected) "{{{3$/;"	f
tlib#agent#Home	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Home(world, selected) "{{{3$/;"	f
tlib#agent#Input	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Input(world, selected) "{{{3$/;"	f
tlib#agent#NewItem	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#NewItem(world, selected) "{{{3$/;"	f
tlib#agent#Null	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Null(world, selected) "{{{3$/;"	f
tlib#agent#OR	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#OR(world, selected) "{{{3$/;"	f
tlib#agent#PageDown	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#PageDown(world, selected) "{{{3$/;"	f
tlib#agent#PageUp	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#PageUp(world, selected) "{{{3$/;"	f
tlib#agent#Paste	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Paste(world, selected) "{{{3$/;"	f
tlib#agent#PopFilter	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#PopFilter(world, selected) "{{{3$/;"	f
tlib#agent#PreviewLine	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#PreviewLine(world, selected) "{{{3$/;"	f
tlib#agent#ReduceFilter	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ReduceFilter(world, selected) "{{{3$/;"	f
tlib#agent#Reset	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Reset(world, selected) "{{{3$/;"	f
tlib#agent#RestrictView	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#RestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Select	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Select(world, selected) "{{{3$/;"	f
tlib#agent#SelectAll	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#SelectAll(world, selected) "{{{3$/;"	f
tlib#agent#SelectDown	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#SelectDown(world, selected) "{{{3$/;"	f
tlib#agent#SelectUp	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#SelectUp(world, selected) "{{{3$/;"	f
tlib#agent#ShiftLeft	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftLeft(world, selected) "{{{3$/;"	f
tlib#agent#ShiftRight	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ShiftRight(world, selected) "{{{3$/;"	f
tlib#agent#ShowInfo	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ShowInfo(world, selected)$/;"	f
tlib#agent#Suspend	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Suspend(world, selected) "{{{3$/;"	f
tlib#agent#SuspendToParentWindow	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#SuspendToParentWindow(world, selected) "{{{3$/;"	f
tlib#agent#ToggleRestrictView	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleRestrictView(world, selected) "{{{3$/;"	f
tlib#agent#ToggleScrollbind	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleScrollbind(world, selected) "{{{3$/;"	f
tlib#agent#ToggleStickyList	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ToggleStickyList(world, selected) "{{{3$/;"	f
tlib#agent#UnrestrictView	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#UnrestrictView(world, selected) "{{{3$/;"	f
tlib#agent#Up	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Up(world, selected, ...) "{{{3$/;"	f
tlib#agent#UpN	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#UpN(world, selected) "{{{3$/;"	f
tlib#agent#ViewFile	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#ViewFile(world, selected) "{{{3$/;"	f
tlib#agent#Wildcard	bundle/tlib_vim/autoload/tlib/agent.vim	/^function! tlib#agent#Wildcard(world, selected) "{{{3$/;"	f
tlib#arg#CComplete	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#CComplete(def, ArgLead) abort "{{{3$/;"	f
tlib#arg#Ex	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#Ex(arg, ...) "{{{3$/;"	f
tlib#arg#Get	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#Get(n, var, ...) "{{{3$/;"	f
tlib#arg#GetOpts	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#GetOpts(args, ...) abort "{{{3$/;"	f
tlib#arg#Let	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#Let(list, ...) "{{{3$/;"	f
tlib#arg#StringAsKeyArgs	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgs(string, ...) "{{{1$/;"	f
tlib#arg#StringAsKeyArgsEqual	bundle/tlib_vim/autoload/tlib/arg.vim	/^function! tlib#arg#StringAsKeyArgsEqual(string) "{{{1$/;"	f
tlib#assert#All	bundle/tlib_vim/autoload/tlib/assert.vim	/^function! tlib#assert#All(vals) abort "{{{3$/;"	f
tlib#assert#Assert	bundle/tlib_vim/autoload/tlib/assert.vim	/^function! tlib#assert#Assert(caller, check, vals) abort "{{{3$/;"	f
tlib#assert#Disable	bundle/tlib_vim/autoload/tlib/assert.vim	/^function! tlib#assert#Disable() abort "{{{3$/;"	f
tlib#assert#Enable	bundle/tlib_vim/autoload/tlib/assert.vim	/^function! tlib#assert#Enable() abort "{{{3$/;"	f
tlib#assert#Map	bundle/tlib_vim/autoload/tlib/assert.vim	/^function! tlib#assert#Map(vals, expr) abort "{{{3$/;"	f
tlib#autocmdgroup#Init	bundle/tlib_vim/autoload/tlib/autocmdgroup.vim	/^function! tlib#autocmdgroup#Init() "{{{3$/;"	f
tlib#balloon#Expand	bundle/tlib_vim/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expand(expr) abort "{{{3$/;"	f
tlib#balloon#Expr	bundle/tlib_vim/autoload/tlib/balloon.vim	/^function! tlib#balloon#Expr() "{{{3$/;"	f
tlib#balloon#Register	bundle/tlib_vim/autoload/tlib/balloon.vim	/^function! tlib#balloon#Register(expr) "{{{3$/;"	f
tlib#balloon#Remove	bundle/tlib_vim/autoload/tlib/balloon.vim	/^function! tlib#balloon#Remove(expr) "{{{3$/;"	f
tlib#bitwise#AND	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#AND(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Add	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Add(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#Bits2Num	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Bits2Num(bits, ...) "{{{3$/;"	f
tlib#bitwise#Num2Bits	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Num2Bits(num) "{{{3$/;"	f
tlib#bitwise#OR	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#OR(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#ShiftLeft	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftLeft(bits, n) "{{{3$/;"	f
tlib#bitwise#ShiftRight	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#ShiftRight(bits, n) "{{{3$/;"	f
tlib#bitwise#Sub	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#Sub(num1, num2, ...) "{{{3$/;"	f
tlib#bitwise#XOR	bundle/tlib_vim/autoload/tlib/bitwise.vim	/^function! tlib#bitwise#XOR(num1, num2, ...) "{{{3$/;"	f
tlib#buffer#BufDo	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#BufDo(exec) abort "{{{3$/;"	f
tlib#buffer#CurrentByte	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#CurrentByte() abort "{{{3$/;"	f
tlib#buffer#DeleteRange	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#DeleteRange(line1, line2) abort "{{{3$/;"	f
tlib#buffer#DisableMRU	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#DisableMRU() abort "{{{3$/;"	f
tlib#buffer#EnableMRU	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#EnableMRU() abort "{{{3$/;"	f
tlib#buffer#Eval	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#Eval(buffer, code) abort "{{{3$/;"	f
tlib#buffer#GetList	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#GetList(...) abort$/;"	f
tlib#buffer#HighlightLine	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#HighlightLine(...) abort "{{{3$/;"	f
tlib#buffer#InsertText	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText(text, ...) abort "{{{3$/;"	f
tlib#buffer#InsertText0	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#InsertText0(text, ...) abort "{{{3$/;"	f
tlib#buffer#KeepCursorPosition	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#KeepCursorPosition(cmd) abort "{{{3$/;"	f
tlib#buffer#ReplaceRange	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#ReplaceRange(line1, line2, lines) abort$/;"	f
tlib#buffer#ScratchEnd	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchEnd() abort "{{{3$/;"	f
tlib#buffer#ScratchStart	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#ScratchStart() abort "{{{3$/;"	f
tlib#buffer#Set	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#Set(buffer) abort "{{{3$/;"	f
tlib#buffer#ViewLine	bundle/tlib_vim/autoload/tlib/buffer.vim	/^function! tlib#buffer#ViewLine(line, ...) abort "{{{3$/;"	f
tlib#cache#Dir	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Dir(...) "{{{3$/;"	f
tlib#cache#EncodedFilename	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#EncodedFilename(type, file, ...) "{{{3$/;"	f
tlib#cache#Filename	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Filename(type, ...) "{{{3$/;"	f
tlib#cache#Get	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Get(cfile, ...) "{{{3$/;"	f
tlib#cache#ListFilesInCache	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#ListFilesInCache(...) "{{{3$/;"	f
tlib#cache#MTime	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#MTime(cfile) "{{{3$/;"	f
tlib#cache#MaybePurge	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#MaybePurge() "{{{3$/;"	f
tlib#cache#Purge	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Purge() "{{{3$/;"	f
tlib#cache#Save	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Save(cfile, value, ...) "{{{3$/;"	f
tlib#cache#Value	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#Value(cfile, generator, ftime, ...) "{{{3$/;"	f
tlib#cache#ValueFromName	bundle/tlib_vim/autoload/tlib/cache.vim	/^function! tlib#cache#ValueFromName(type, name, ...) abort "{{{3$/;"	f
tlib#char#Get	bundle/tlib_vim/autoload/tlib/char.vim	/^function! tlib#char#Get(...) "{{{3$/;"	f
tlib#char#GetWithTimeout	bundle/tlib_vim/autoload/tlib/char.vim	/^function! tlib#char#GetWithTimeout(timeout, ...) "{{{3$/;"	f
tlib#char#IsAvailable	bundle/tlib_vim/autoload/tlib/char.vim	/^function! tlib#char#IsAvailable() "{{{3$/;"	f
tlib#cmd#BrowseOutput	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutput(command) "{{{3$/;"	f
tlib#cmd#BrowseOutputWithCallback	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#BrowseOutputWithCallback(callback, command) "{{{3$/;"	f
tlib#cmd#Capture	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#Capture(cmd) "{{{3$/;"	f
tlib#cmd#DefaultBrowseOutput	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#DefaultBrowseOutput(cmd) "{{{3$/;"	f
tlib#cmd#OutputAsList	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#OutputAsList(command) "{{{3$/;"	f
tlib#cmd#ParseScriptname	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#ParseScriptname(line) "{{{3$/;"	f
tlib#cmd#TBrowseScriptnames	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#TBrowseScriptnames() abort "{{{3$/;"	f
tlib#cmd#Time	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#Time(cmd) "{{{3$/;"	f
tlib#cmd#UseVertical	bundle/tlib_vim/autoload/tlib/cmd.vim	/^function! tlib#cmd#UseVertical(...) "{{{3$/;"	f
tlib#comments#Comments	bundle/tlib_vim/autoload/tlib/comments.vim	/^function! tlib#comments#Comments(...)$/;"	f
tlib#date#AddDays	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#AddDays(date, n) abort "{{{3$/;"	f
tlib#date#DiffInDays	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#DiffInDays(date, ...)$/;"	f
tlib#date#Format	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#Format(...) abort "{{{3$/;"	f
tlib#date#IsDate	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#IsDate(text) abort "{{{3$/;"	f
tlib#date#Parse	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#Parse(date, ...) "{{{3$/;"	f
tlib#date#SecondsSince1970	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#SecondsSince1970(date, ...) "{{{3$/;"	f
tlib#date#Shift	bundle/tlib_vim/autoload/tlib/date.vim	/^function! tlib#date#Shift(date, shift) abort "{{{3$/;"	f
tlib#dictionary#Rev	bundle/tlib_vim/autoload/tlib/dictionary.vim	/^function! tlib#dictionary#Rev(dict, ...) abort "{{{3$/;"	f
tlib#dir#CD	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#CD(dir, ...) "{{{3$/;"	f
tlib#dir#CanonicName	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#CanonicName(dirname) "{{{3$/;"	f
tlib#dir#Ensure	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#Ensure(dir) "{{{3$/;"	f
tlib#dir#MyRuntime	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#MyRuntime() "{{{3$/;"	f
tlib#dir#NativeName	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#NativeName(dirname) "{{{3$/;"	f
tlib#dir#PlainName	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#PlainName(dirname) "{{{3$/;"	f
tlib#dir#Pop	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#Pop() "{{{3$/;"	f
tlib#dir#Push	bundle/tlib_vim/autoload/tlib/dir.vim	/^function! tlib#dir#Push(dir, ...) "{{{3$/;"	f
tlib#eval#Extend	bundle/tlib_vim/autoload/tlib/eval.vim	/^function! tlib#eval#Extend(a, b, ...) abort "{{{3$/;"	f
tlib#eval#FormatValue	bundle/tlib_vim/autoload/tlib/eval.vim	/^function! tlib#eval#FormatValue(value, ...) "{{{3$/;"	f
tlib#file#Absolute	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Absolute(filename, ...) abort "{{{3$/;"	f
tlib#file#Canonic	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Canonic(filename, ...) abort "{{{3$/;"	f
tlib#file#Edit	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Edit(fileid) abort "{{{3$/;"	f
tlib#file#Filereadable	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Filereadable(filename) abort "{{{3$/;"	f
tlib#file#FilterFiles	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#FilterFiles(files, options) abort "{{{3$/;"	f
tlib#file#Glob	bundle/tlib_vim/autoload/tlib/file.vim	/^    function! tlib#file#Glob(pattern, ...) abort "{{{3$/;"	f
tlib#file#Globpath	bundle/tlib_vim/autoload/tlib/file.vim	/^    function! tlib#file#Globpath(path, pattern, ...) abort "{{{3$/;"	f
tlib#file#IsAbsolute	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#IsAbsolute(filename) abort "{{{3$/;"	f
tlib#file#Join	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Join(filename_parts, ...) abort "{{{3$/;"	f
tlib#file#Relative	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Relative(filename, basedir) abort "{{{3$/;"	f
tlib#file#Split	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#Split(filename) abort "{{{3$/;"	f
tlib#file#With	bundle/tlib_vim/autoload/tlib/file.vim	/^function! tlib#file#With(fcmd, bcmd, files, ...) abort "{{{3$/;"	f
tlib#fixes#Winpos	bundle/tlib_vim/autoload/tlib/fixes.vim	/^function! tlib#fixes#Winpos() "{{{3$/;"	f
tlib#grep#Do	bundle/tlib_vim/autoload/tlib/grep.vim	/^function! tlib#grep#Do(cmd, rx, files) "{{{3$/;"	f
tlib#grep#List	bundle/tlib_vim/autoload/tlib/grep.vim	/^function! tlib#grep#List(rx, files) "{{{3$/;"	f
tlib#grep#LocList	bundle/tlib_vim/autoload/tlib/grep.vim	/^function! tlib#grep#LocList(rx, files) "{{{3$/;"	f
tlib#grep#QuickFixList	bundle/tlib_vim/autoload/tlib/grep.vim	/^function! tlib#grep#QuickFixList(rx, files) "{{{3$/;"	f
tlib#hash#Adler32	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32(chars) "{{{3$/;"	f
tlib#hash#Adler32_tlib	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_tlib(chars) "{{{3$/;"	f
tlib#hash#Adler32_vim	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#Adler32_vim(chars) "{{{3$/;"	f
tlib#hash#CRC32B	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B(chars) "{{{3$/;"	f
tlib#hash#CRC32B_ruby	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_ruby(chars) "{{{3$/;"	f
tlib#hash#CRC32B_vim	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#CRC32B_vim(chars) "{{{3$/;"	f
tlib#hash#CreateCrcTable	bundle/tlib_vim/autoload/tlib/hash.vim	/^function! tlib#hash#CreateCrcTable() "{{{3$/;"	f
tlib#hook#Run	bundle/tlib_vim/autoload/tlib/hook.vim	/^function! tlib#hook#Run(hook, ...) "{{{3$/;"	f
tlib#input#CommandSelect	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#CommandSelect(command, ...) "{{{3$/;"	f
tlib#input#Dialog	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#Dialog(text, options, default) "{{{3$/;"	f
tlib#input#EditCallback	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#EditCallback(...) "{{{3$/;"	f
tlib#input#EditList	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#EditList(query, list, ...) "{{{3$/;"	f
tlib#input#EditW	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#EditW(world, name, value, callback, ...) "{{{3$/;"	f
tlib#input#List	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#List(type, ...) "{{{3$/;"	f
tlib#input#ListD	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#ListD(dict) "{{{3$/;"	f
tlib#input#ListW	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#ListW(world, ...) "{{{3$/;"	f
tlib#input#Resume	bundle/tlib_vim/autoload/tlib/input.vim	/^function! tlib#input#Resume(name, pick, bufnr) "{{{3$/;"	f
tlib#list#All	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#All(list, expr) abort "{{{3$/;"	f
tlib#list#Any	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Any(list, expr) abort "{{{3$/;"	f
tlib#list#Compact	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Compact(list) abort "{{{3$/;"	f
tlib#list#Find	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Find(list, filter, ...) abort "{{{3$/;"	f
tlib#list#FindAll	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#FindAll(list, filter, ...) abort "{{{3$/;"	f
tlib#list#Flatten	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Flatten(list) abort "{{{3$/;"	f
tlib#list#Inject	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Inject(list, value, Function) abort "{{{3$/;"	f
tlib#list#Remove	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Remove(list, element) abort "{{{3$/;"	f
tlib#list#RemoveAll	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#RemoveAll(list, element) abort "{{{3$/;"	f
tlib#list#ToDictionary	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#ToDictionary(list, default, ...) abort "{{{3$/;"	f
tlib#list#Uniq	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Uniq(list, ...) abort "{{{3$/;"	f
tlib#list#Zip	bundle/tlib_vim/autoload/tlib/list.vim	/^function! tlib#list#Zip(lists, ...) abort "{{{3$/;"	f
tlib#loclist#Browse	bundle/tlib_vim/autoload/tlib/loclist.vim	/^function! tlib#loclist#Browse(...) abort "{{{3$/;"	f
tlib#map#PumAccept	bundle/tlib_vim/autoload/tlib/map.vim	/^function! tlib#map#PumAccept(key) "{{{3$/;"	f
tlib#normal#WithRegister	bundle/tlib_vim/autoload/tlib/normal.vim	/^function! tlib#normal#WithRegister(cmd, ...) "{{{3$/;"	f
tlib#notify#Echo	bundle/tlib_vim/autoload/tlib/notify.vim	/^function! tlib#notify#Echo(text, ...)$/;"	f
tlib#notify#PrintError	bundle/tlib_vim/autoload/tlib/notify.vim	/^function! tlib#notify#PrintError() abort "{{{3$/;"	f
tlib#notify#TrimMessage	bundle/tlib_vim/autoload/tlib/notify.vim	/^function! tlib#notify#TrimMessage(message) "{{{3$/;"	f
tlib#number#ConvertBase	bundle/tlib_vim/autoload/tlib/number.vim	/^function! tlib#number#ConvertBase(num, base, ...) "{{{3$/;"	f
tlib#paragraph#GetMetric	bundle/tlib_vim/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#GetMetric() "{{{3$/;"	f
tlib#paragraph#Move	bundle/tlib_vim/autoload/tlib/paragraph.vim	/^function! tlib#paragraph#Move(direction, count)$/;"	f
tlib#persistent#Dir	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#Dir() "{{{3$/;"	f
tlib#persistent#EncodedFilename	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#EncodedFilename(type, file, ...) "{{{3$/;"	f
tlib#persistent#Filename	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#Filename(type, ...) "{{{3$/;"	f
tlib#persistent#Get	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#Get(...) "{{{3$/;"	f
tlib#persistent#MTime	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#MTime(cfile) "{{{3$/;"	f
tlib#persistent#Save	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#Save(...) "{{{3$/;"	f
tlib#persistent#Value	bundle/tlib_vim/autoload/tlib/persistent.vim	/^function! tlib#persistent#Value(...) "{{{3$/;"	f
tlib#progressbar#Display	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Display(value, ...) "{{{3$/;"	f
tlib#progressbar#Init	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Init(max, ...) "{{{3$/;"	f
tlib#progressbar#Restore	bundle/tlib_vim/autoload/tlib/progressbar.vim	/^function! tlib#progressbar#Restore(...) "{{{3$/;"	f
tlib#qfl#AgentEditLine	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditLine(world, selected) "{{{3$/;"	f
tlib#qfl#AgentEditQFE	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentEditQFE(world, selected, ...) "{{{3$/;"	f
tlib#qfl#AgentGotoQFE	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentGotoQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentPreviewQFE	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentPreviewQFE(world, selected) "{{{3$/;"	f
tlib#qfl#AgentSplitBuffer	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentTabBuffer	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentTabBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentVSplitBuffer	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentVSplitBuffer(world, selected) "{{{3$/;"	f
tlib#qfl#AgentWithSelected	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#AgentWithSelected(world, selected, ...) "{{{3$/;"	f
tlib#qfl#Balloon	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#Balloon() "{{{3$/;"	f
tlib#qfl#Browse	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#Browse(...) abort "{{{3$/;"	f
tlib#qfl#EditLine	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#EditLine(lnum) "{{{3$/;"	f
tlib#qfl#FormatQFLE	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#FormatQFLE(qfe) dict abort "{{{3$/;"	f
tlib#qfl#InitListBuffer	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#InitListBuffer(world) "{{{3$/;"	f
tlib#qfl#QfeFilename	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#QfeFilename(qfe) abort "{{{3$/;"	f
tlib#qfl#QflList	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#QflList(list, ...) abort "{{{3$/;"	f
tlib#qfl#RunCmdOnSelected	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#RunCmdOnSelected(world, selected, cmd, ...) "{{{3$/;"	f
tlib#qfl#SetFollowCursor	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetFollowCursor(world, selected) "{{{3$/;"	f
tlib#qfl#SetSyntax	bundle/tlib_vim/autoload/tlib/qfl.vim	/^function! tlib#qfl#SetSyntax() dict abort "{{{3$/;"	f
tlib#rx#Escape	bundle/tlib_vim/autoload/tlib/rx.vim	/^function! tlib#rx#Escape(text, ...) "{{{3$/;"	f
tlib#rx#EscapeReplace	bundle/tlib_vim/autoload/tlib/rx.vim	/^function! tlib#rx#EscapeReplace(text, ...) "{{{3$/;"	f
tlib#rx#LooksLikeRegexp	bundle/tlib_vim/autoload/tlib/rx.vim	/^function! tlib#rx#LooksLikeRegexp(text) abort "{{{3$/;"	f
tlib#rx#Suffixes	bundle/tlib_vim/autoload/tlib/rx.vim	/^function! tlib#rx#Suffixes(...) "{{{3$/;"	f
tlib#scratch#CloseScratch	bundle/tlib_vim/autoload/tlib/scratch.vim	/^function! tlib#scratch#CloseScratch(keyargs, ...) "{{{3$/;"	f
tlib#scratch#UseScratch	bundle/tlib_vim/autoload/tlib/scratch.vim	/^function! tlib#scratch#UseScratch(...) "{{{3$/;"	f
tlib#selection#GetSelection	bundle/tlib_vim/autoload/tlib/selection.vim	/^function! tlib#selection#GetSelection(mode, ...) range "{{{3$/;"	f
tlib#signs#ClearAll	bundle/tlib_vim/autoload/tlib/signs.vim	/^function! tlib#signs#ClearAll(sign) "{{{3$/;"	f
tlib#signs#ClearBuffer	bundle/tlib_vim/autoload/tlib/signs.vim	/^function! tlib#signs#ClearBuffer(sign, bufnr) "{{{3$/;"	f
tlib#signs#Mark	bundle/tlib_vim/autoload/tlib/signs.vim	/^function! tlib#signs#Mark(sign, list) "{{{3$/;"	f
tlib#string#Chomp	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Chomp(string, ...) "{{{3$/;"	f
tlib#string#Count	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Count(string, rx) "{{{3$/;"	f
tlib#string#Format	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Format(template, dict) "{{{3$/;"	f
tlib#string#Input	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Input(...) abort "{{{3$/;"	f
tlib#string#MatchAll	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#MatchAll(string, regexp, ...) abort "{{{3$/;"	f
tlib#string#Printf1	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Printf1(format, string) "{{{3$/;"	f
tlib#string#RemoveBackslashes	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#RemoveBackslashes(text, ...) "{{{3$/;"	f
tlib#string#SplitCommaList	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#SplitCommaList(text, ...) abort "{{{3$/;"	f
tlib#string#Strip	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#Strip(string) "{{{3$/;"	f
tlib#string#TrimLeft	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#TrimLeft(string) "{{{3$/;"	f
tlib#string#TrimRight	bundle/tlib_vim/autoload/tlib/string.vim	/^function! tlib#string#TrimRight(string) "{{{3$/;"	f
tlib#syntax#Collect	bundle/tlib_vim/autoload/tlib/syntax.vim	/^function! tlib#syntax#Collect() "{{{3$/;"	f
tlib#syntax#Names	bundle/tlib_vim/autoload/tlib/syntax.vim	/^function! tlib#syntax#Names(...) "{{{3$/;"	f
tlib#sys#ConvertPath	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#ConvertPath(converter, filename) "{{{3$/;"	f
tlib#sys#FileArgs	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#FileArgs(cmd, files) "{{{3$/;"	f
tlib#sys#GetCmd	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#GetCmd(cmd) "{{{3$/;"	f
tlib#sys#IsCygwinBin	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#IsCygwinBin(cmd) "{{{3$/;"	f
tlib#sys#IsExecutable	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#IsExecutable(cmd, ...) "{{{3$/;"	f
tlib#sys#IsSpecial	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#IsSpecial(filename) abort "{{{3$/;"	f
tlib#sys#MaybeUseCygpath	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#MaybeUseCygpath(cmd) "{{{3$/;"	f
tlib#sys#Open	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#Open(filename) abort "{{{3$/;"	f
tlib#sys#OpenWithSystemViewer	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#OpenWithSystemViewer(filename) abort "{{{3$/;"	f
tlib#sys#SystemInDir	bundle/tlib_vim/autoload/tlib/sys.vim	/^function! tlib#sys#SystemInDir(dir, ...) abort "{{{3$/;"	f
tlib#tab#BufMap	bundle/tlib_vim/autoload/tlib/tab.vim	/^function! tlib#tab#BufMap() "{{{3$/;"	f
tlib#tab#Set	bundle/tlib_vim/autoload/tlib/tab.vim	/^function! tlib#tab#Set(tabnr) "{{{3$/;"	f
tlib#tab#TabWinNr	bundle/tlib_vim/autoload/tlib/tab.vim	/^function! tlib#tab#TabWinNr(buffer) "{{{3$/;"	f
tlib#tag#Collect	bundle/tlib_vim/autoload/tlib/tag.vim	/^function! tlib#tag#Collect(constraints, ...) "{{{3$/;"	f
tlib#tag#Format	bundle/tlib_vim/autoload/tlib/tag.vim	/^function! tlib#tag#Format(tag) "{{{3$/;"	f
tlib#tag#Retrieve	bundle/tlib_vim/autoload/tlib/tag.vim	/^function! tlib#tag#Retrieve(rx, ...) "{{{3$/;"	f
tlib#textobjects#Init	bundle/tlib_vim/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#Init() "{{{3$/;"	f
tlib#textobjects#StandardParagraph	bundle/tlib_vim/autoload/tlib/textobjects.vim	/^function! tlib#textobjects#StandardParagraph() "{{{3$/;"	f
tlib#time#Diff	bundle/tlib_vim/autoload/tlib/time.vim	/^function! tlib#time#Diff(a, b, ...) "{{{3$/;"	f
tlib#time#DiffMSecs	bundle/tlib_vim/autoload/tlib/time.vim	/^function! tlib#time#DiffMSecs(a, b, ...) "{{{3$/;"	f
tlib#time#FormatNow	bundle/tlib_vim/autoload/tlib/time.vim	/^function! tlib#time#FormatNow() "{{{3$/;"	f
tlib#time#MSecs	bundle/tlib_vim/autoload/tlib/time.vim	/^function! tlib#time#MSecs() "{{{3$/;"	f
tlib#time#Now	bundle/tlib_vim/autoload/tlib/time.vim	/^function! tlib#time#Now() "{{{3$/;"	f
tlib#trace#Backtrace	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Backtrace(caller) abort "{{{3$/;"	f
tlib#trace#Disable	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Disable() abort "{{{3$/;"	f
tlib#trace#Enable	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Enable() abort "{{{3$/;"	f
tlib#trace#Print	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Print(caller, vars, values) abort "{{{3$/;"	f
tlib#trace#Printer_echom	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Printer_echom(type, text, args) abort "{{{3$/;"	f
tlib#trace#Printer_file	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Printer_file(type, text, args) abort "{{{3$/;"	f
tlib#trace#Reset	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Reset() abort "{{{3$/;"	f
tlib#trace#Set	bundle/tlib_vim/autoload/tlib/trace.vim	/^function! tlib#trace#Set(vars, ...) abort "{{{3$/;"	f
tlib#type#Are	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Are(vals, type) abort "{{{3$/;"	f
tlib#type#Check	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Check(caller, names, vals) abort "{{{3$/;"	f
tlib#type#Define	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Define(name, schema) abort "{{{3$/;"	f
tlib#type#Disable	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Disable() abort "{{{3$/;"	f
tlib#type#Enable	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Enable() abort "{{{3$/;"	f
tlib#type#Has	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Has(val, schema) abort "{{{3$/;"	f
tlib#type#Have	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Have(vals, schema) abort "{{{3$/;"	f
tlib#type#Is	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#Is(val, type) abort "{{{3$/;"	f
tlib#type#IsDictionary	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsDictionary(expr)$/;"	f
tlib#type#IsFuncref	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsFuncref(expr)$/;"	f
tlib#type#IsList	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsList(expr)$/;"	f
tlib#type#IsNil	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsNil(expr) abort "{{{3$/;"	f
tlib#type#IsNumber	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsNumber(expr)$/;"	f
tlib#type#IsString	bundle/tlib_vim/autoload/tlib/type.vim	/^function! tlib#type#IsString(expr)$/;"	f
tlib#url#Decode	bundle/tlib_vim/autoload/tlib/url.vim	/^function! tlib#url#Decode(url) "{{{3$/;"	f
tlib#url#DecodeChar	bundle/tlib_vim/autoload/tlib/url.vim	/^function! tlib#url#DecodeChar(char) "{{{3$/;"	f
tlib#url#Encode	bundle/tlib_vim/autoload/tlib/url.vim	/^function! tlib#url#Encode(url, ...) "{{{3$/;"	f
tlib#url#EncodeChar	bundle/tlib_vim/autoload/tlib/url.vim	/^function! tlib#url#EncodeChar(char) "{{{3$/;"	f
tlib#var#EGet	bundle/tlib_vim/autoload/tlib/var.vim	/^function! tlib#var#EGet(var, namespace, ...) "{{{3$/;"	f
tlib#var#Get	bundle/tlib_vim/autoload/tlib/var.vim	/^function! tlib#var#Get(var, namespace, ...) "{{{3$/;"	f
tlib#var#Let	bundle/tlib_vim/autoload/tlib/var.vim	/^function! tlib#var#Let(name, val) "{{{3$/;"	f
tlib#var#List	bundle/tlib_vim/autoload/tlib/var.vim	/^function! tlib#var#List(rx, ...) "{{{3$/;"	f
tlib#vcs#Diff	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#Diff(filename, ...) "{{{3$/;"	f
tlib#vcs#Executable	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#Executable(type) "{{{3$/;"	f
tlib#vcs#FindVCS	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#FindVCS(filename) "{{{3$/;"	f
tlib#vcs#GitLsPostprocess	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#GitLsPostprocess(filename) abort "{{{3$/;"	f
tlib#vcs#IsDirty	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#IsDirty(...) abort "{{{3$/;"	f
tlib#vcs#Ls	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#Ls(...) "{{{3$/;"	f
tlib#vcs#Status	bundle/tlib_vim/autoload/tlib/vcs.vim	/^function! tlib#vcs#Status(...) abort "{{{3$/;"	f
tlib#vim#CopyFunction	bundle/tlib_vim/autoload/tlib/vim.vim	/^function! tlib#vim#CopyFunction(old, new, ...) "{{{3$/;"	f
tlib#vim#Maximize	bundle/tlib_vim/autoload/tlib/vim.vim	/^    fun! tlib#vim#Maximize(fullscreen) "{{{3$/;"	f
tlib#vim#RestoreWindow	bundle/tlib_vim/autoload/tlib/vim.vim	/^    function! tlib#vim#RestoreWindow() "{{{3$/;"	f
tlib#win#GetID	bundle/tlib_vim/autoload/tlib/win.vim	/^    function! tlib#win#GetID() abort "{{{3$/;"	f
tlib#win#GetLayout	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#GetLayout(...) "{{{3$/;"	f
tlib#win#GotoID	bundle/tlib_vim/autoload/tlib/win.vim	/^    function! tlib#win#GotoID(win_id) abort "{{{3$/;"	f
tlib#win#List	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#List() "{{{3$/;"	f
tlib#win#Set	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#Set(winnr) "{{{3$/;"	f
tlib#win#SetById	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#SetById(win_id) "{{{3$/;"	f
tlib#win#SetLayout	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#SetLayout(layout) "{{{3$/;"	f
tlib#win#Width	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#Width(wnr) "{{{3$/;"	f
tlib#win#WinDo	bundle/tlib_vim/autoload/tlib/win.vim	/^function! tlib#win#WinDo(ex) "{{{3$/;"	f
to_be_file	bundle/vim-snipmate/t/jumping.vim	/^function! s:to_be_file(expected) abort$/;"	f
to_be_in	bundle/vim-snipmate/t/jumping.vim	/^function! s:to_be_in(item, list) abort$/;"	f
toggle	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:toggle(op) abort$/;"	f
toggleIgnoreFilter	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom()$/;"	f
tovl#scratch_buffer#GetContents	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#GetContents()$/;"	f
tovl#scratch_buffer#Help	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Help()$/;"	f
tovl#scratch_buffer#KeepIntactLineNr	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#KeepIntactLineNr()$/;"	f
tovl#scratch_buffer#ScratchBuffer	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#ScratchBuffer(opts)$/;"	f
tovl#scratch_buffer#Write	bundle/vim-addon-mw-utils/autoload/tovl/scratch_buffer.vim	/^function! tovl#scratch_buffer#Write()$/;"	f
tovl#ui#filter_list#ListTest	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTest()$/;"	f
tovl#ui#filter_list#ListTestGotoLineCurrentBuf	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListTestGotoLineCurrentBuf()$/;"	f
tovl#ui#filter_list#ListView	bundle/vim-addon-mw-utils/autoload/tovl/ui/filter_list.vim	/^fun! tovl#ui#filter_list#ListView(opts)$/;"	f
transformations.basename	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.basename(input, o) abort$/;"	f
transformations.blank	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.blank(input, o) abort$/;"	f
transformations.camelcase	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.camelcase(input, o) abort$/;"	f
transformations.capitalize	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.capitalize(input, o) abort$/;"	f
transformations.close	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.close(input, o) abort$/;"	f
transformations.colons	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.colons(input, o) abort$/;"	f
transformations.dirname	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.dirname(input, o) abort$/;"	f
transformations.dot	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.dot(input, o) abort$/;"	f
transformations.hyphenate	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.hyphenate(input, o) abort$/;"	f
transformations.open	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.open(input, o) abort$/;"	f
transformations.plural	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.plural(input, o) abort$/;"	f
transformations.singular	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.singular(input, o) abort$/;"	f
transformations.underscore	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.underscore(input, o) abort$/;"	f
transformations.uppercase	bundle/vim-rails/autoload/rails.vim	/^function! s:transformations.uppercase(input, o) abort$/;"	f
uniq	bundle/vim-rails/autoload/rails.vim	/^function! s:uniq(list) abort$/;"	f
unmarksigns	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:unmarksigns()$/;"	f
upDirCurrentRootClosed	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed()$/;"	f
upDirCurrentRootOpen	bundle/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen()$/;"	f
url_decode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_decode(str)$/;"	f
url_encode	bundle/vim-rails/autoload/rails.vim	/^function! s:url_encode(str, ...) abort$/;"	f
url_encode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_encode(str)$/;"	f
usrign	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:usrign(item, type)$/;"	f
vacantdict	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:vacantdict(dict)$/;"	f
validfile	bundle/ctrlp.vim/autoload/ctrlp/buffertag.vim	/^fu! s:validfile(fname, ftype)$/;"	f
viewEdit	bundle/vim-rails/autoload/rails.vim	/^function! s:viewEdit(cmd, ...) abort$/;"	f
viewList	bundle/vim-rails/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
vim_snippets#Filename	bundle/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
visual_placeholder	bundle/vim-snipmate/autoload/snipmate/parse.vim	/^function! s:visual_placeholder(var, indent) abort$/;"	f
walker	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:walker(m, p, d)$/;"	f
warn	bundle/vim-rails/autoload/rails.vim	/^function! s:warn(str) abort$/;"	f
wrap	bundle/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
wrapreg	bundle/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
writecache	bundle/ctrlp.vim/autoload/ctrlp.vim	/^fu! s:writecache(cafile)$/;"	f
writecache	bundle/ctrlp.vim/autoload/ctrlp/bookmarkdir.vim	/^fu! s:writecache(lines)$/;"	f
xml_decode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_decode(str)$/;"	f
xml_encode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_encode(str)$/;"	f
xml_entity_decode	bundle/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_entity_decode(str)$/;"	f
yS	bundle/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	bundle/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	bundle/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ys	bundle/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	bundle/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
